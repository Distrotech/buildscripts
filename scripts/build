#!/bin/bash

#GITIP=[2002:29dd:626::1]
GITIP=192.30.252.130
GITBASE=git://${GITIP}/Distrotech

XML_CATALOG_FILES='/etc/xml/catalog.xml /usr/share/docbook2X/dtd/catalog.xml /usr/share/docbook2X/xslt/catalog.xml'
LANG=en_ZA.UTF8

#Setup layout path
SRCDIR=/usr/src
DISTDIR=/dist
STATDIR=${DISTDIR}/status
DEFDIR=${DISTDIR}/def
PKGDISTDIR=${DISTDIR}/pkg
TOOLPKG=${PKGDISTDIR}/build
TOOLDIR=${DISTDIR}/cross
BASEROOT=${DISTDIR}/root
SCRIPTDIR=${DISTDIR}/scripts
PKGBUILDDIR=${DISTDIR}/build
ARCHROOT=/build
GITURL=${GITBASE}
GITUPDATE=1;
DIETBUILD=1;
AMDEF="1.11";
BOOTCLEAN="distclean";

#Multiarch Definitions
MARCH_x86_64="x86_32|i[3-6]86|x86_64"
MARCH_x86_32=${MARCH_x86_64}
MARCH_powerpc64="powerpc|powerpc64"

export XML_CATALOG_FILES LANG

#Parse cmdline opts
#Adding a arch here may require you adding tupple/kernel arch/libdirs and bellow in arch_config
ALLARCHLIST="i686 arm x86_64 x86_32 mips mips64 powerpc powerpc64";
ARCHMPAT=${ALLARCHLIST// /|}
ALLARCH="0";

ARCHLIST="";
CLEANOPT="";
MAKE_J="-j10"

while (( $# > 1 ));do
  case ${1} in
    clean|distclean)CLEANOPT=${1};;
    noclean)NOCLEAN=1;;
    -)shift;
      break;;
    buildall)ALLARCH="1";;
    *)if [[ ${1} =~ ${ARCHMPAT} ]] && [ -d ${ARCHROOT}/${1} ];then
        ARCHLIST="${ARCHLIST} ${1}"
      fi;;
  esac;
  shift;
done;

if [ "${CLEANOPT}" ];then
  BOOTCLEAN=${CLEANOPT};
fi;

#Is last man standing a arch ??
if [ "${1}" ] && [[ ${1} =~ ${ARCHMPAT} ]] && [ ! -e ${DEFDIR}/${1} ];then
  ARCHLIST="${ARCHLIST} ${1}"
  shift;
 elif [ "${1}" ] && [ "${1}" == "buildall" ];then
  ARCHLIST=${ALLARCHLIST}
 elif [ "${ALLARCH}" == "1" ];then
  ARCHLIST=${ALLARCHLIST}
fi;

ulimit -s unlimited

#Set the arch based on uname -m this is not able to determine multi/sub arches
export NARCH=${NARCH:=$( uname -m )}

case ${NARCH} in
  arm*)NARCH=arm;;
esac;

#Native if not specified
if [ ! "${ARCHLIST}" ];then
  ARCHLIST=${NARCH}
fi;

unset CFLAGS LDFLAGS CPPFLAGS

arch_config() {
  #Set build tupple
  case ${1} in
    arm64)TUPPLE=aarch64-linux-gnu;;
    arm)TUPPLE=arm-linux-gnueabi;;
    mips64)TUPPLE=mips64-linux-gnuabi64;;
    x86_32)TUPPLE=x86_64-linux-gnux32;;
    *)TUPPLE=${1}-linux-gnu;;
  esac;

  #Set Libdir
  case ${1} in
    x86_32)SETLIBDIR="libx32";;
    arm64)SETLIBDIR="lib";;
    *64)SETLIBDIR="lib64";;
    *)SETLIBDIR="lib";;
  esac;

  #Determine kernel arch
  case ${1} in
    x86_*|i[3-6]86)LINARCH="x86";;
    arm64)LINARCH=arm64;;
    *64)LINARCH=${1::-2};;
    *)LINARCH=${1};
  esac;
}

mnt_archroot() {
  if [ ! -d /sys/module/wrapfs ];then
    if [ -x /sbin/modprobe ] && [ -e /lib/modules/`uname -r`/modules.dep ];then
      modprobe wrapfs
      if [ -d /sys/module/wrapfs ];then
        BINDFS="mount -t wrapfs";
       else
        BINDFS="mount --bind";
      fi;
     else
      BINDFS="mount --bind";
     fi;
   else
    BINDFS="mount -t wrapfs";
  fi;

  if [ ! -d ${DISTDIR}/.git ];then
    if [ ! -d ${DISTDIR} ];then
      mkdir ${DISTDIR}
    fi;
    git clone ${GITURL}/buildscripts.git ${DISTDIR}/
  fi;
  if [ ! -d ${ARCHROOT}/${1}/${DISTDIR}/.git ];then
    ${BINDFS} ${DISTDIR} ${ARCHROOT}/${1}/${DISTDIR}
  fi;

  if [ ! -d ${ARCHROOT}/${1}/sys/dev ];then
    mount -t sysfs sysfs_${1} ${ARCHROOT}/${1}/sys
  fi;

  if [ ! -d ${ARCHROOT}/${1}/proc/1 ];then
    mount -t proc proc_${1} ${ARCHROOT}/${1}/proc
  fi;

  if [ ! -d ${ARCHROOT}/${1}/dev/pts ];then
    mount -t devtmpfs dev_${1} ${ARCHROOT}/${1}/dev
    mount -t devpts devpts_${1} ${ARCHROOT}/${1}/dev/pts
  fi;
}

#Check arch export common env variables
check_create_arch() {
  #Set tupple  
  arch_config ${1}
  HOST=${TUPPLE}
  KARCH=${LINARCH}
  B_LIBDIRS=${SETLIBDIR}
  
  unset TUPPLE SETLIBDIR LINARCH

  case ${1} in
    arm|arm64)QCPU=arm;;
    mips|mips64)QCPU=mips;;
    powerpc)QCPU=ppc;;
    powerpc64)QCPU=ppc64;;
  esac;

  export B_LIBDIRS HOST KARCH QCPU

  HDIR=${BASEROOT}/${1}
  if [ ! -d ${HDIR} ];then
    mkdir -p ${HDIR}/usr/include
  fi;

  if [ ! -d ${ARCHROOT} ];then
    mkdir -p ${ARCHROOT}
  fi;

  #Core utils barfs when bootstraping
  for incdir in /usr/X11R7/include /usr/${B_LIBDIRS}/glib-2.0/include /opt/qt-4/include \
                /usr/include/glib-2.0 /usr/include/dbus-1.0 /opt/xfce/include \
                /usr/include/gtk-3.0 /usr/include/gtk-2.0;do
    if [ ! -d ${incdir} ];then
      mkdir -p ${incdir}
    fi;
    if [ ! -d ${ARCHROOT}/${1}/${incdir} ];then
      mkdir -p ${ARCHROOT}/${1}/${incdir}
    fi;
  done;

  if [ ! -d ${ARCHROOT}/${1}/usr/lib/glib-2.0/include ];then
    mkdir -p ${ARCHROOT}/${1}/usr/lib/glib-2.0/include
  fi;

  if [ "${1}" != "${NARCH}" ] || [ -d ${ARCHROOT}/${1} ];then
    if [ ! -d ${ARCHROOT}/${1}/etc ];then
      mkdir -p ${ARCHROOT}/${1}/etc
      ln -s ../proc/self/mounts ${ARCHROOT}/${1}/etc/mtab
      rsync -avRP /etc/passwd /etc/shadow /etc/group /etc/xml/catalog* /etc/xml/docbook-xsl.xml  /etc/xml/docbook.xml ${ARCHROOT}/${1}
      if [ -x /bin/domainname ];then
        echo "domainname $(domainname)" > ${ARCHROOT}/${1}/etc/resolv.conf
        echo "search $(domainname)" >> ${ARCHROOT}/${1}/etc/resolv.conf
        echo "nameserver ::1" >> ${ARCHROOT}/${1}/etc/resolv.conf
       else
        echo "nameserver ::1" > ${ARCHROOT}/${1}/etc/resolv.conf
      fi;
      if [ -e ${PKGDISTDIR}/java-jar.tar.xz ];then
        tar -C ${ARCHROOT}/${1} -xf ${PKGDISTDIR}/java-jar.tar.xz
      fi;
    fi;
    for adir in / /root /dev /proc /sys /usr/src ${DISTDIR} /tmp ${ARCHROOT};do
      mkdir -p ${ARCHROOT}/${1}/${adir}
    done
    if [ ! -e ${ARCHROOT}/${1}/${ARCHROOT}/${1} ];then
      ln -s .. ${ARCHROOT}/${1}/${ARCHROOT}/${1}
    fi;
    mnt_archroot ${1}
   elif [ "${1}" == "${NARCH}" ] && [ ! -e ${ARCHROOT}/${NARCH} ];then
    ln -s .. ${ARCHROOT}/${NARCH}
  fi;

  if [ -d /usr/${HOST}/${B_LIBDIRS} ] && [ ! -e ${ARCHROOT}/${1}/usr/${HOST}/${B_LIBDIRS}/libstdc++.so ];then
    rsync -aR /usr/${HOST}/${B_LIBDIRS} ${ARCHROOT}/${1}/
  fi;

  if [ -d ${SRCDIR}/linux/usr/include/linux ];then
    if [ ! -d ${HDIR}/usr/include ] || [ ! -f ${TOOLPKG}/${1}/kernel-headers.tar.xz ] || \
       [ ${SRCDIR}/linux/usr/include/linux -nt ${HDIR}/usr/include/linux ];then
      
      rsync -a --include=asm-${KARCH} --include=asm-generic --exclude=.install --exclude=..install.cmd \
                --exclude=.check --exclude=..check.cmd \
                --exclude=asm* ${SRCDIR}/linux/usr/include/ ${HDIR}/usr/include/
      if [ -e ${HDIR}/usr/include/asm ] && [ ! -h ${HDIR}/usr/include/asm ];then
        rm -rf ${HDIR}/usr/include/asm
      fi;
      if [ ! -e ${HDIR}/usr/include/asm ];then
        ln -s asm-${KARCH} ${HDIR}/usr/include/asm
      fi;
      if [ -d ${ARCHROOT}/${1} ] && [ ! -h ${ARCHROOT}/${1} ];then
        if [ ! -d ${ARCHROOT}/${1}/usr/include ];then
          mkdir -p ${ARCHROOT}/${1}/usr/include
        fi;
        rsync -a ${HDIR}/usr/include/ ${ARCHROOT}/${1}/usr/include/ >/dev/null
      fi;

      (cd ${SRCDIR}/linux
       if [ ! -d ${TOOLPKG}/${1}/ ];then
         mkdir -p ${TOOLPKG}/${1}
       fi;
      find . ! -regex '.*\.install$' -and ! -regex '.*\.\.install.cmd$'  -and ! -regex '.*\.check$' -and ! -regex \
             '.*\.check.cmd$' -and ! -regex '\.\/usr\/include\/asm-.*' -and -regex '\.\/usr\/include\/.*' -or -regex \
             "\.\/usr\/include\/asm-${KARCH}\/.*\.h" -or -regex "\.\/usr\/include\/asm-generic\/.*\.h" |\
        cpio -o -H tar |xz -9 > ${TOOLPKG}/${1}/kernel-headers.tar.xz)
    fi;
  fi;

  #Sync root too arch if no includes
  if [ -d ${ARCHROOT}/${1} ] && [ ! -d ${ARCHROOT}/${1}/usr/include ];then
    mkdir -p ${ARCHROOT}/${1}/usr/include
    rsync -a ${HDIR}/usr/include/ ${ARCHROOT}/${1}/usr/include/
  fi;
}

git_load_pkg() {
  PKGGITDIR=${1}/${1}${2}

  if [ ! -d ${SRCDIR}/${PKGGITDIR} ];then
    if [ ! -d ${SRCDIR}/Xorg/Xorg-git ];then
      mkdir -p ${SRCDIR}/Xorg/Xorg-git
    fi;

    if [ "${3}" ];then
      GIT_TAG=${3}
     else
      GIT_TAG=distrotech-${4}${2}
    fi;
    echo Cloning branch/tag ${GIT_TAG} of repository ${4}
    git clone --depth 1 -b ${GIT_TAG} ${GITURL}/${4}.git ${SRCDIR}/${PKGGITDIR}

    #some packages are retards null config them
    if [ "${NONULLCONF}" ] && [ "${NONULLCONF}" == "1" ];then
      return 0;
    fi;

#    if [ -e ${SRCDIR}/${PKGGITDIR}/configure.ac ] || [ -e ${SRCDIR}/${PKGGITDIR}/configure.in ];then
#      if [ "${SRCDIR}" ] && [ "${PKGGITDIR}" ] && [ -d ${SRCDIR}/${PKGGITDIR} ];then
#        (cd ${SRCDIR}/${PKGGITDIR}
#         sh ./configure;
#         #On failure run autoreconf
#         if [ $? != 0 ];then
#           autoreconf -f
#           sh ./configure;
#         fi;
#         if [ -d .git ];then
#           git reset --hard;git clean -x -f -d
#          else
#           make distclean
#         fi;)
#      fi;
#    fi;
   elif [ "${NOSVNROOT}" ] && [ "${NOSVNROOT}" == "1" ];then
     return 0;
#   elif [ "${GITUPDATE}" == "1" ];then
#    if [ "${NOGITROOT}" ] && [ "${NOGITROOT}" == "1" ];then
#      svn up --accept tc ${SRCDIR}/${PKGSVNDIR}-svn || return 1
#      svn export --force ${SRCDIR}/${PKGSVNDIR}-svn ${SRCDIR}/${PKGSVNDIR}
#     else
#      svn up --accept tc ${SRCDIR}/${PKGSVNDIR}
#    fi;
  fi;

  if [ -x /usr/bin/find ] || [ -x /bin/find ];then
    for fcnf in aclocal.m4 configure Makefile.in autoconf.h.in;do
      find ${SRCDIR}/${PKGGITDIR} -name ${fcnf} |awk '{printf "touch %s\n",$1}' |sh
    done;
    find ${SRCDIR}/${PKGGITDIR} -regex '.*\.info$' -or -regex '.*\.pdf$'|awk '{printf "touch %s\n",$1}' |sh
   else
    (cd ${SRCDIR}/${PKGGITDIR}
    touch aclocal.m4 */aclocal.m4 configure Makefile.in */Makefile.in autoconf.h.in */autoconf.h.in)
  fi;
}

check_package() {
  #Help out on bad project XXXX GIT check/fetch
  if [ ! -e ${DEFDIR}/${1} ];then
    (cat <<EOF

Missing build def file for ${1}

This file is a file that is read with eval and contains the following vars

PREFIX: Install prefix
VERSION: version number to use optional
VERSEP: seperator used to determine source directory ${SRCDIR}/<project>[\${VERSEP}\${VERSION}]
CONFOPT: Options [excluding --prefix / --host / --build] passed to configure 
ARCH: list of arch to build for
ARCHOPT: Array of aditional options passed to configure per arch [1,2,...]
CFGPTH: Change to this dir before running configure
BUILDDIR: Use build dirs assumed to be 1 if not set too 0
CFGBIN: Prefix to configure bin file
ADDPATH: Add to PATH
ADDCFLAG: Add to CFLAGS
ADDLDFLAG: Add to LDFLAGS
MAKEOPTS: Additional opts passed to Make
MAKETARGETS: Additional Targets passed to make
MAKEITARGETS: Additional Targets passed to make with install
STDOPTS: use these not the builtin configure options 
ADDFILTER: also add these files to filter
SYSCONFPRE: prefix sysconfdir
EXTRALIBS: Add to the linked LIBS list
NOMAKEFLAGS: Dont pass CFLAGS/LDFLAGS To make
CANBUILD: Space seperated lists of arch to build for
EOF
    )
    return 255
  fi;
}

strip_path() {
  path=${1}

  if [ ! -d ${path}/.dbg ];then
    mkdir ${path}/.dbg
  fi;

  for file in `ls ${path}`;do
    if [ ! -s ${path}/${file} ] || [ -h ${path}/${file} ];then
      continue
    fi;
    if ${OBJCOPY} --only-keep-debug ${path}/${file} ${path}/.dbg/${file};then
      ${OBJCOPY} --strip-debug ${path}/${file}
      ${OBJCOPY} --add-gnu-debuglink=${path}/.dbg/${file} ${path}/${file}
    fi;
  done;
}

strip_rootdir() {
  for extrapath in ${1} ${1}/usr `ls -d ${1}/opt/* 2>/dev/null` ${1}/usr/X11R7;do
    for append in bin sbin lib libx32 lib64;do
      if [ -d ${extrapath}/${append} ];then
        strip_path ${extrapath}/${append} 2>/dev/null
      fi;
    done;
  done
}

tar_package() {
  strip_rootdir ${1}

  if [ ! -d ${2}/${3} ];then
    mkdir -p ${2}/${3}
   else
    touch ${2}/${3}
  fi;

  (cd ${1}
  mylang="en";
  pkgpre=${2}/${3}/${3}


  manpages=".*\/share\/man\/.*";
  infopages=".*\/share\/info/.*";
  sharedoc=".*\/share\/doc\/.*";
  dbginfo=".*\/\.dbg"
  allloc="\.\/usr\/share\/locale\/.*";
  myloc="\.\/usr\/share\/locale\/${mylang}.*";

  find . ! -regex "\.\/include\/.*" -and ! -regex "\.\/usr\/include\/.*" -and ! -regex "\.\/etc\/.*" \
         ! -regex "\.\/opt\/[a-zA-Z0-9\-_]+\/include\/.*" -and ! -regex "\.\/usr\/X11R7\/include\/.*" -and \
         ! -regex ".*\/${B_LIBDIRS}\/.*" -and ! -regex "\.\/etc" -and \
         ! -regex "${dbginfo}" -and ! -regex "${dbginfo}\/.*" -and ! -regex "${sharedoc}" -and \
         ! -regex "${manpages}" -and ! -regex "${infopages}" -and ! -regex "\.\/usr\/${B_LIBDIRS}\/locale\/.*" \
         ! -regex ".*\/include" -and ! -regex ".*\/share\/doc" -and ! -regex ".*\/share\/man" -and \
         ! -regex ".*\/share\/info" -and ! -regex "${allloc}" -or -regex "${myloc}" |\
       cpio -ov -H tar |xz -9 > ${pkgpre}.tar.xz

  #try limit it to pkgs with include dirs / libdirs this is not fool proof ie /opt/....
  if [ -d include ] || [ -d usr/include ] || [ -d usr/X11R7/include ] || [ -d opt ] || \
     [ -d ${B_LIBDIRS} ] || [ -d usr/${B_LIBDIRS} ] || [ -d usr/X11R7/${B_LIBDIRS} ];then
    find . ! -regex ".*\/${B_LIBDIRS}\/.*\.a" -and ! -regex ".*\/${B_LIBDIRS}\/.*\.la" -and \
           ! -regex "${dbginfo}\/.*" -and ! -regex "${dbginfo}\/.*" -and ! -regex "\.\/usr\/${B_LIBDIRS}\/go.*" -and \
           ! -regex "\.\/usr\/${B_LIBDIRS}\/jvm\/jdk-.*" -and ! -regex "\.\/usr\/${B_LIBDIRS}\/jvm\/jre-.*" -and \
           ! -regex "\.\/usr\/${B_LIBDIRS}\/gcc.*" -and ! -regex "\.\/usr\/${B_LIBDIRS}\/locale\/.*" -and \
           ! -regex "\.\/usr\/${B_LIBDIRS}\/thunderbird-devel-.*" -and \
           ! -regex "\.\/usr\/${B_LIBDIRS}\/firefox-devel-.*" -and ! -regex "\.\/usr\/${B_LIBDIRS}\/locale\/.*" -and \
           -regex ".*\/${B_LIBDIRS}\/.*" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-libs.tar.xz
    find . -regex "\.\/include\/.*" -or -regex "\.\/usr\/include\/.*" -or \
           -regex "\.\/opt\/[a-zA-Z0-9\-_]+\/include\/.*" -or -regex "\.\/usr\/X11R7\/include\/.*" -or \
           -regex ".*\/${B_LIBDIRS}\/.*\.a" -or -regex "\.\/usr\/${B_LIBDIRS}\/go.*" -or \
           -regex "\.\/usr\/${B_LIBDIRS}\/thunderbird-devel-.*" -or \
           -regex "\.\/usr\/${B_LIBDIRS}\/firefox-devel-.*" -or \
           -regex "\.\/usr\/${B_LIBDIRS}\/gcc.*" -or -regex ".*\/${B_LIBDIRS}\/.*\.la" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-dev.tar.xz
    if [ -d usr/${B_LIBDIRS}/jvm ] && [ ! -d usr/${B_LIBDIRS}/jvm/gcj-jdk ];then
      find . -regex "\.\/usr\/${B_LIBDIRS}\/jvm\/jre-.*"  |\
           cpio -ov -H tar |xz -9 > ${pkgpre}-jre.tar.xz
      find . -regex "\.\/usr\/${B_LIBDIRS}\/jvm\/jdk-.*"  |\
           cpio -ov -H tar |xz -9 > ${pkgpre}-jdk.tar.xz
    fi;
  fi;

  find . -regex "${dbginfo}\/.*" -and ! -regex ".*\/${B_LIBDIRS}\/\.dbg\/.*\.a" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-dbg.tar.xz

  if [ -d usr/share/locale ] || [ -d usr/${B_LIBDIRS}/locale ];then
    find . -regex "${allloc}" -and ! -regex "${myloc}" -or -regex "\.\/usr\/${B_LIBDIRS}\/locale\/.*" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-locale.tar.xz
  fi;

  if [ -d usr/share/man ] || [ -d usr/share/doc ] || [ -d usr/share/info ] || \
     [ -d usr/X11R7/share/man ] || [ -d usr/X11R7/share/doc ] || [ -d usr/X11R7/share/info ] || \
     [ -d share/man ] || [ -d share/doc ] || [ -d share/info ] || [ -d opt ];then
    find . -regex "${sharedoc}" -or -regex "${manpages}" -or -regex "${infopages}" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-doc.tar.xz
  fi;

  if [ -d etc ];then 
    find . -regex "\.\/etc\/.*" |\
         cpio -ov -H tar |xz -9 > ${pkgpre}-conf.tar.xz
  fi;)
}

sysroot_fixup() {
  if [ "${SYSROOTFIXUP}" == "1" ];then
    #Replace all libtools with the "sysroot" version
    for ltool in `find . -name libtool`;do
      if [ -x ${ltool} ];then
        rm ${ltool}
        if [ -d ${ARCHROOT}/${1} ] && [ ! -h ${ARCHROOT}/${1} ];then
          cp ${ARCHROOT}/${1}/usr/bin/libtool ${ltool}
         else
          cp /usr/bin/libtool ${ltool}
        fi;
      fi;
    done

    #Filter all -L / -I bits and rebase to sysroot
    for mfile in `find . -name Makefile` ${ADDFILTER};do
      sed -i -e "s/\-L\/\//\-L\//g" -e "s/\-L\(\/usr\/\)li[bx3246]\+/\-L=\1${B_LIBDIRS}/g" \
             -e "s/\-L\(\/usr\/X11R7\/\)li[bx3246]\+/\-L=\1${B_LIBDIRS}/g" \
             -e "s/\-L\(\/\)li[bx3246]\+/\-L=\1${B_LIBDIRS}/g" \
             -e "s/\-I\//\-I=\//g" $mfile
    done
  fi;
}

make_cc_destdir() {
  if [ "${LDISCC}" == "1" ];then
    export LD="${CC} ${CC_SYSROOT}"
   else
    export LD="${HOST}-ld --sysroot=${SYSROOT}/ --rpath-link=${RPATH_LINK}"
  fi;

  if [ "${NOMAKEFLAGS}" == "1" ];then
    unset CFLAGS CPPFLAGS CXXFLAGS LDFLAGS
    if [ "${ADDCFLAG}" ];then
      CC_SYSROOT="${CC_SYSROOT} ${ADDCFLAG}"
    fi;
    /usr/bin/make ${MAKE_J} V=1 AR="${AR}" RANLIB=${RANLIB} LD="${LD}" SYSROOT=${SYSROOT} \
      CXX="${CXX} ${CC_SYSROOT}" CC="${CC} ${CC_SYSROOT}" ${MAKEOPTS} \
      ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS}
    RES=$?
    if [ ${RES} != 0 ] && [ "${MAKE_J}" ];then
      /usr/bin/make V=1 AR="${AR}" RANLIB=${RANLIB} LD="${LD}" SYSROOT=${SYSROOT} \
        CXX="${CXX} ${CC_SYSROOT}" CC="${CC} ${CC_SYSROOT}" ${MAKEOPTS} \
        ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || return 1
     elif [ ${RES} != 0 ];then
      return 1
    fi;
    /usr/bin/make V=1 AR="${AR}" RANLIB=${RANLIB} LD="${LD}" SYSROOT=${SYSROOT} \
        CXX="${CXX} ${CC_SYSROOT}" CC="${CC} ${CC_SYSROOT}" ${ARCHMOPT} DESTDIR=${DIST_ROOT} \
        ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install  || return 1
   else
    /usr/bin/make ${MAKE_J} V=1 LDFLAGS="${LDFLAGS}" CFLAGS="${CFLAGS}" AR="${AR}" RANLIB=${RANLIB} LD="${LD}" \
      CXX="${CXX} ${CC_SYSROOT}" CC="${CC} ${CC_SYSROOT}" ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || return 1
    /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install || return 1

    RES=$?
    if [ ${RES} != 0 ] && [ "${MAKE_J}" ];then
      /usr/bin/make V=1 LDFLAGS="${LDFLAGS}" CFLAGS="${CFLAGS}" AR="${AR}" RANLIB=${RANLIB} LD="${LD}" \
        CXX="${CXX} ${CC_SYSROOT}" CC="${CC} ${CC_SYSROOT}" ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || return 1
      /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install || return 1
     elif [ ${RES} != 0 ];then
      return 1
    fi;
  fi;
}

imake_cross_build() {
  CC_TMP=${CC}
  unset CC
  /usr/bin/make distclean
  xmkmf -a || return 1

  #Postconfig hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ${2} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT}
  fi;

  sysroot_fixup ${1}

  /usr/bin/make V=1 CXX="${CXX} ${CC_SYSROOT}" CC="${CC_TMP} ${CC_SYSROOT}" SHLIBDIR=/usr/X11R7/${B_LIBDIRS} \
       LOCAL_LDFLAGS="-L=/usr/X11R7/${B_LIBDIRS}" ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || return 1
  /usr/bin/make V=1 CXX="${CXX} ${CC_SYSROOT}" CC="${CC_TMP} ${CC_SYSROOT}" SHLIBDIR=/usr/X11R7/${B_LIBDIRS} \
       LOCAL_LDFLAGS="-L=/usr/X11R7/${B_LIBDIRS}" ${MAKEOPTS} ${ARCHMOPT} DESTDIR=${DIST_ROOT} ${MAKEITARGETS} install || return 1
}

cmake_cross_build() {
#  export LD_LIBRARY_PATH="${RPATH_LINK}"
#  export CC="${CC} --sysroot=${SYSROOT}/ -Wl,--rpath-link=${RPATH_LINK}"
#  export CXX="${CXX} --sysroot=${SYSROOT}/ -Wl,--rpath-link=${RPATH_LINK}"
  export LDFLAGS="${LDFLAGS} ${EXTRALIBS}"

  if [ "${2}" == "${NARCH}" ];then
    #Cmake bootstrap process special case
    if [ "${PROJECT}" == "cmake" ];then
      (../bootstrap --prefix=/usr --mandir=share && make ${MAKE_J} && make install) || return 1
    fi;
    cmake -DCMAKE_INSTALL_PREFIX:PATH=${PREFIX} -DCMAKE_STANDARD_LIBRARIES="${EXTRALIBS}" \
          -DCMAKE_C_FLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" -DCMAKE_C_LINK_FLAGS="${LDFLAGS}" \
          -DCMAKE_INSTALL_RPATH:PATH="${RPATH_LINK}" ${CONFOPT} ${ARCHXOPT} ${ARCHOPT} ${1}${CFGBIN}
   else
    cmake -DCMAKE_INSTALL_PREFIX:PATH=${PREFIX} -DCMAKE_STANDARD_LIBRARIES="${EXTRALIBS}" \
          -DCMAKE_C_FLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" -DCMAKE_C_LINK_FLAGS="${LDFLAGS}" \
          -DCMAKE_SYSTEM_NAME=Linux  -DCMAKE_FIND_ROOT_PATH="${SYSROOT}/" \
          -DCMAKE_INSTALL_RPATH:PATH="${RPATH_LINK}" ${CONFOPT} ${ARCHXOPT} ${ARCHOPT} \
          -DCMAKE_C_COMPILER=/usr/bin/${HOST}-gcc -DCMAKE_C_COMPILER_ENV_VAR="${CC_SYSROOT}" \
          -DCMAKE_CXX_COMPILER=/usr/bin/${HOST}-g++ -DCMAKE_CXX_COMPILER_ENV_VAR="${CC_SYSROOT}" \
          -DGNU_HOST=${3} -DCMAKE_TOOLCHAIN_FILE=${SCRIPTDIR}/cmake_${2}.cross ${1}${CFGBIN}
  fi;
  cmake ${CONFOPT} ${ARCHXOPT} ${ARCHOPT} -DCMAKE_INSTALL_PREFIX:PATH=${PREFIX} ${1}${CFGBIN}

  #Postconfig hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ${2} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT}
  fi;

  /usr/bin/make ${MAKE_J} V=1 ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} && \
    /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install
  RES=$?
  if [ ${RES} != 0 ] && [ "${MAKE_J}" ];then
    /usr/bin/make V=1 ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || return 1
    /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install || return 1
   elif [ ${RES} != 0 ];then
     return 1
  fi;
}

autoconf_cross_build() {
  if [ "${CLEARFLAGS}" ] && [ "${CLEARFLAGS}" == "1" ];then
    unset CFLAGS CPPFLAGS CXXFLAGS LDFLAGS LD
    if [ "${ADDLDFLAG}" ];then
      export LDFLAGS="${ADDLDFLAG}"
    fi;
    if [ "${ADDCFLAG}" ];then
      export CFLAGS=${ADDCFLAG}
#      export CPPFLAGS=${ADDCFLAG}
      export CXXFLAGS=${ADDCFLAG}
    fi;
   else
    export CC="${CC} ${CC_SYSROOT}"
    export CXX="${CXX} ${CC_SYSROOT}"
    export AS="${AS}";
    export CC="${CC}"
    export CXX="${CXX}"
  fi;

  if [ "${LDISCC}" == "1" ];then
    export LD="${CC}"
   else
    export LD="${HOST}-ld --sysroot=${SYSROOT}/ --rpath-link=${RPATH_LINK}"
  fi;

#  export LD_LIBRARY_PATH="${RPATH_LINK}"
  if [ ! "${STDOPTS}" ];then
    STDOPTSX="--prefix=${PREFIX} --sysconfdir=/etc/${SYSCONFPRE} --mandir=${PREFIX}/share/man --localstatedir=/var${STATEDIRPRE} --infodir=${PREFIX}/share/info" 
    if [ "${B_LIBDIRS}" ];then
      STDOPTSX="${STDOPTSX} --libdir=${PREFIX}/${B_LIBDIRS}";
      if [ "${LIBDIRPRE}" ];then
        STDOPTSX="${STDOPTSX}/${LIBDIRPRE}";
      fi;
    fi;
    if [ "${NOCROSS}" ] && [ "${NOCROSS}" == "1" ];then
      STDOPTSX="${STDOPTSX} --host=${3} --build=${3}"
     else
      STDOPTSX="${STDOPTSX} --host=${3} --build=${BUILD}"
    fi;
   else
    STDOPTSX=${STDOPTS}
  fi;

  #Disable shared libs for c++ libs where libstdc++ is not shared
  if [ "${STDCSTATIC}" ] && [ ! -f ${SYSROOT}/usr/${B_LIBDIRS}/libstdc++.so ] && [ ! -f /usr/${3}/${B_LIBDIRS}/libstdc++.so ];then
      STDOPTSX="${STDOPTSX} ${STDCSTATIC}";
  fi;

  if [ "${ADDBUILDSYSROOT}" == "1" ] && [ -d ${ARCHROOT}/${2} ] && [ ! -h ${ARCHROOT}/${1} ];then
    STDOPTSX="${STDOPTSX} --with-build-sysroot=${ARCHROOT}/${2}";
   elif [ "${ADDBUILDSYSROOT}" == "1" ] && [ "${2}" == "${NARCH}" ];then
    STDOPTSX="${STDOPTSX} --with-build-sysroot=/";
  fi;

  if [ "${ADDWITHSYSROOT}" == "1" ] && [ -d ${ARCHROOT}/${2} ] && [ ! -h ${ARCHROOT}/${1} ];then
    STDOPTSX="${STDOPTSX} --with-sysroot=${ARCHROOT}/${2}"
   elif [ "${ADDWITHSYSROOT}" == "1" ] && [ "${2}" == "${NARCH}" ];then
    STDOPTSX="${STDOPTSX} --with-sysroot=/"
  fi;

  if [ "${GOBJECTINTRO}" ] && [ "${GOBJECTINTRO}" == "1" ] && [ "${2}" != "${NARCH}" ];then
    if [ ! -d ${ARCHROOT}/${2}/usr/${B_LIBDIRS}/gobject-introspection ];then
      STDOPTSX="${STDOPTSX} --enable-introspection=no"
     else
      STDOPTSX="${STDOPTSX} --enable-introspection=yes"
      MAKEOPTS="${MAKEOPTS} INTROSPECTION_SCANNER=${ARCHROOT}/${2}/usr/bin/g-ir-scanner";
    fi;
  fi;

  #Preconfig hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/pre-config ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/pre-config ${2} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT}
  fi;

  if [ "${NOCCOPT}" ] && [ "${NOCCOPT}" == "1" ] && [ "${EXTRALIBS}" ];then
    ${1}${CFGBIN}configure ${STDOPTSX} ${CONFOPT} ${ARCHOPT} ${ARCHXOPT} LIBS="${EXTRALIBS}" || return 1
   elif [ "${NOCCOPT}" ] && [ "${NOCCOPT}" == "1" ];then
    ${1}${CFGBIN}configure ${STDOPTSX} ${CONFOPT} ${ARCHOPT} ${ARCHXOPT} || return 1
   elif [ "${EXTRALIBS}" ];then
    ${1}${CFGBIN}configure ${STDOPTSX} ${CONFOPT} ${ARCHOPT} ${ARCHXOPT} CC="${CC}" CXX="${CXX}" LIBS="${EXTRALIBS}" || return 1
   else
    ${1}${CFGBIN}configure ${STDOPTSX} ${CONFOPT} ${ARCHOPT} ${ARCHXOPT} CC="${CC}" CXX="${CXX}" || return 1
  fi;

  #Postconfig hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/post-config ${2} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT}
  fi;

  sysroot_fixup ${2}

  #config make hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/make-config ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/make-config ${NARCH} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT} ${HOST} ${2}
   else
    if [ "${ADDCC}" ] && [ "${ADDCC}" == "0" ];then
      /usr/bin/make ${MAKE_J} HOSTCC="${BUILD}-gcc" HOSTLD="${BUILD}-gcc" \
        HOSTCC_LDFLAGS="-L=/${NLIBDIR} -L=/usr/${NLIBDIR}" ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} && \
        /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} install
      RES=$?
      if [ ${RES} != 0 ] && [ "${MAKE_J}" ];then
        /usr/bin/make HOSTCC="${BUILD}-gcc" HOSTLD="${BUILD}-gcc" HOSTCC_LDFLAGS="-L=/${NLIBDIR} -L=/usr/${NLIBDIR}" \
          ${MAKEOPTS} ${ARCHMOPT} ${MAKEALL} ${MAKETARGETS} || make ${MAKE_J} || return 1
        /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install 
       elif [ ${RES} != 0 ];then
        return 1
      fi;
     else
      /usr/bin/make ${MAKE_J} LD="${LD}" CC="${CC}" CXX="${CXX}" HOSTCC="${BUILD}-gcc" \
        HOSTCC_LDFLAGS="-L=/${NLIBDIR} -L=/usr/${NLIBDIR}" ${MAKEOPTS} ${ARCHMOPT} \
        ${MAKEALL} ${MAKETARGETS} && \
      /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install
      RES=$?
      if [ ${RES} != 0 ] && [ "${MAKE_J}" ];then
        /usr/bin/make LD="${LD}" CC="${CC}" CXX="${CXX}" HOSTCC="${BUILD}-gcc" \
          HOSTCC_LDFLAGS="-L=/${NLIBDIR} -L=/usr/${NLIBDIR}" ${MAKEOPTS} ${ARCHMOPT} \
          ${MAKEALL} ${MAKETARGETS} || make ${MAKE_J} || return 1
        /usr/bin/make DESTDIR=${DIST_ROOT} ${MAKEOPTS} ${ARCHMOPT} ${MAKEITARGETS} install
       elif [ ${RES} != 0 ];then
        return 1
      fi;
    fi
  fi;
}

build_project() {
  BUILDPROJECT=${1}
  shift;
  barch=${1};
  shift;
  addopts=$@

  eval `cat ${DEFDIR}/${BUILDPROJECT}`
  DONTBUILDPAT=${DONTBUILD// /|}
  if [ "${DONTBUILD}" ] && [[ ${barch} =~ ${DONTBUILDPAT} ]];then
    return 0;
  fi;

  if [ "${addopts}" ];then
    CONFOPT="${CONFOPT} ${addopts}"
  fi;

  if [ ! "${ALIAS}" ];then
    export PROJECT=${BUILDPROJECT}
   else
    export PROJECT=${ALIAS};
  fi;

  if [ ! "${MAKEALL}" ];then
    MAKEALL=all
  fi;

  if [ ! "${PREFIX}" ];then
    echo "PREFIX not defined";
    return 1;
  fi;

  AVER=VERSION_${barch}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""

  #For null config i need this set up early
  export ACLOCAL_PATH=/usr/share/aclocal:/usr/share/xfce4/dev-tools/m4macros:./m4
  if [ "${AMVER}" ];then
    ACLOCAL=aclocal-${AMVER}
    AUTOMAKE=automake-${AMVER}
   else
    ACLOCAL=aclocal-${AMDEF}
    AUTOMAKE=automake-${AMDEF}
  fi;
  export ACLOCAL AUTOMAKE
  if [ ! "${GITREPO}" ];then
    export GITREPO=${PROJECT}
  fi;
  if [ ! "${GITBRANCH}" ];then
    export GITBRANCH="distrotech-${GITREPO}${VERSEP}${VERSION}";
  fi
  if [ ${PROJECT} != "Xorg" ];then
    git_load_pkg ${PROJECT} ${VERSEP}${VERSION} ${GITBRANCH} ${GITREPO}
   else
     mkdir -p ${SRCDIR}/${PROJECT}/${PROJECT}${VERSEP}${VERSION}
  fi;

  if [ "${VERSION}" ];then
    if [ -d ${SRCDIR}/${PROJECT}/${PROJECT}${VERSEP}${VERSION} ];then
      export PKG=${BUILDPROJECT}${VERSEP}${VERSION}
      export PSOURCEDIR=${PROJECT}/${PROJECT}${VERSEP}${VERSION}
     elif [ -d ${SRCDIR}/${PROJECT}${VERSEP}${VERSION} ];then
      export PKG=${BUILDPROJECT}${VERSEP}${VERSION}
      export PSOURCEDIR=${PROJECT}${VERSEP}${VERSION}
     else
      echo "Project Dir Not Found ${SRCDIR}/${PROJECT}${VERSEP}${VERSION}";
      return 1
    fi;
   else
    export PKG=${BUILDPROJECT}
    export PSOURCEDIR=${PROJECT}${VERSEP}${VERSION}
  fi;
  export VERSION

  if [ "${PSOURCEDIR}" ] && [ ! -d ${SRCDIR}/${PSOURCEDIR} ];then
    echo "No Such Project"
    return 1
  fi;

  if [ ! "${BUILDDIR}" ];then
    export BUILDDIR=1;
  fi;

  if [ ! "${SYSROOTFIXUP}" ];then
    SYSROOTFIXUP="1";
  fi;
  export SYSROOTFIXUP;

  if [ ! "${FIXUPLIB}" ];then
    FIXUPLIB="0";
  fi;
  export FIXUPLIB;

  if [ "${ADDPATH}" ];then
    PATH="${PATH}:${ADDPATH}"
  fi;
  export PATH="${PATH}:/opt/qt-4/bin:/opt/xfce/bin:/opt/xfce/sbin:${ADDPATH}"
  echo Building ${PKG}

  if [ ! "${CFGPTH}" ];then
    cd ${SRCDIR}/${PSOURCEDIR}
    TOPDIR=./
   else
    if [ ! -d ${SRCDIR}/${PSOURCEDIR}/${CFGPTH} ];then
      mkdir -p ${SRCDIR}/${PSOURCEDIR}/${CFGPTH}
    fi;
    cd ${SRCDIR}/${PSOURCEDIR}/${CFGPTH}
    TOPDIR=../
  fi;

  if [ ${BUILDDIR} == "1" ];then
    TOPDIR=${TOPDIR}../
  fi;

  if [ "${JAVA_HOME}" ];then
    export JAVA_HOME
    export PATH=${JAVA_HOME}/bin:${PATH}
  fi;

  if [ "${ANT_HOME}" ];then
    export ANT_HOME
    export PATH=${ANT_HOME}/bin:${PATH}
  fi;

  SYSPATH=${PATH}

  if [ -x /usr/bin/which ] || [ -x /bin/which ];then
    export RSYNC=$( which rsync );
   elif [ -x /usr/bin/rsync ];then
     export RSYNC=/usr/bin/rsync;
   else
     export RSYNC=true
  fi;

  if [ -d ${ARCHROOT}/${barch} ] && [ ! -h ${ARCHROOT}/${barch} ];then
    export SYSROOT=${ARCHROOT}/${barch};
   elif [ "${barch}" == "${NARCH}" ];then
    export SYSROOT="";
  fi;

  if [ ! -d ${SYSROOT} ];then
    return 0;
  fi;

  MOPTIN=MOPT_${barch}
  AOPTIN=OPT_${barch}

  #use eval ${MOPTIN}=XXXX to set it
  ARCHMOPT=${!MOPTIN}
  ARCHOPT=${!AOPTIN}

  if [ "${barch}" != "${NARCH}" ];then
    XOPTIN=OPTX_${barch}
    ARCHXOPT="${CONFOPTX} ${!XOPTIN}"
   else
    ARCHXOPT="";
  fi;

  #XXX only when there is a scanner and can execute
  if [ "${GOBJECTINTRO}" ] && [ "${GOBJECTINTRO}" == "1" ] && [ "${barch}" != "${NARCH}" ];then
    SYSROOTPATH=1;
  fi;

  if [ "${NARCH}" == "x86_64" ];then
    if [ "${barch}" == "i686" ] || [ "${barch}" == "x86_32" ];then
      export LD_LIBRARY_PATH="${SYSROOT}/${B_LIBDIRS}:${SYSROOT}/usr/${B_LIBDIRS}:${SYSROOT}/usr/X11R7/${B_LIBDIRS}:${SYSROOT}/usr/lib/perl/x86_64-linux/CORE";
      if [ "${SYSROOTPATH}" == "1" ];then
        export PYTHON=${SYSROOT}/usr/bin/python
        export PYTHONHOME=${SYSROOT}/usr
        export PYTHONPATH=${SYSROOT}/usr/${B_LIBDIRS}/gobject-introspection/giscanner:${SYSROOT}/usr/${B_LIBDIRS}/gobject-introspection
        export PATH="${SYSROOT}/sbin:${SYSROOT}/bin:${SYSROOT}/usr/sbin:${SYSROOT}/usr/bin:${SYSROOT}/usr/X11R7/bin:${SYSPATH}";
        eval `chroot ${SYSROOT} /usr/bin/perl -V:privlib -V:archlib -V:sitearch -V:sitelib`
        export PERL5LIB=${SYSROOT}/${privlib}:${SYSROOT}/${archlib}:${SYSROOT}/${sitearch}:${SYSROOT}/${sitelib}
      fi;
#      export PERL5LIB="${SYSROOT}/usr/lib/perl5/5.16.2/x86_64-linux-thread-multi";
#      eval `perl -V:archlib -V:sitelib -V:sitearch -V:privlib`
#      export PERL5LIB="${SYSROOT}/${sitearch}:${SYSROOT}/${sitelib}:${SYSROOT}/${archlib}:${SYSROOT}/${privlib}"
     else
      if [ "${SYSROOTPATH}" == "1" ];then
        export PYTHON=${SYSROOT}/usr/bin/python
        export PYTHONHOME=${SYSROOT}/usr
        export PYTHONPATH=${SYSROOT}/usr/${B_LIBDIRS}/gobject-introspection/giscanner:${SYSROOT}/usr/${B_LIBDIRS}/gobject-introspection
        export PATH="${SYSROOT}/sbin:${SYSROOT}/bin:${SYSROOT}/usr/sbin:${SYSROOT}/usr/bin:${SYSROOT}/usr/X11R7/bin:${SYSPATH}";
       else
        export PATH=${SYSPATH}
      fi;
      unset LD_LIBRARY_PATH PYTHONHOME PERL5LIB
    fi;
   else
    unset LD_LIBRARY_PATH PYTHONHOME PERL5LIB
    export PATH=${SYSPATH}
  fi;

  if [ -d ${ARCHROOT}/${barch}/opt/qt-4 ] && [ ! -h ${ARCHROOT}/${barch} ];then
    export QTDIR=${ARCHROOT}/${barch}/opt/qt-4
   elif [ -d /opt/qt-4 ];then
    export QTDIR=/opt/qt-4
  fi;

  CFLAGS="${ADDCFLAG} -I=/include -I=/usr/include -I=/usr/X11R7/include -I=/usr/lib/glib-2.0/include -I=/usr/include/glib-2.0 -I=/usr/include/gtk-3.0 -I=/usr/include/gtk-2.0 -I=/usr/include/dbus-1.0 -I=/opt/qt-4/include -I=/opt/xfce/include";
# -I=/usr/lib/perl5/5.16.2/${HOST}-thread-multi/CORE";
  if [ "${JAVA_HOME}" ] && [ -d ${JAVA_HOME}/include ];then
    CFLAGS="${CFLAGS} -I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux";
  fi
  export CXXFLAGS=${CFLAGS}
  LDFLAGS="-L=/usr/${B_LIBDIRS} -L=/${B_LIBDIRS} -L=/opt/qt-4/${B_LIBDIRS} -L=/opt/xfce/${B_LIBDIRS} -L=/usr/X11R7/${B_LIBDIRS} ${ADDLDFLAG}"
  if [ "${SETCPPTOC}" == "1" ];then
    CPPFLAGS=${CFLAGS};
  fi;
  CPPFLAGS="${ADDCPPFLAG}";
  if [ "${CPPFLAGS}" ];then
    export CPPFLAGS
  fi;
  export FORCE_UNSAFE_CONFIGURE=1
#    export PKG_CONFIG_SYSROOT_DIR="${SYSROOT}"
  export PKG_CONFIG_PATH="${SYSROOT}/${B_LIBDIRS}/pkgconfig:${SYSROOT}/usr/${B_LIBDIRS}/pkgconfig:${SYSROOT}/opt/apache2/${B_LIBDIRS}/pkgconfig:${SYSROOT}/usr/share/${B_LIBDIRS}/pkgconfig:${SYSROOT}/usr/X11R7/${B_LIBDIRS}/pkgconfig:${SYSROOT}/usr/X11R7/share/pkgconfig:${SYSROOT}/lib/pkgconfig:${SYSROOT}/usr/lib/pkgconfig:${SYSROOT}/opt/qt-4/${B_LIBDIRS}/pkgconfig:${SYSROOT}/opt/xfce/${B_LIBDIRS}/pkgconfig";
#  export PYTHONPATH="/usr/${B_LIBDIRS}/python2.7/site-packages/"

  RPATH_LINK="${SYSROOT}/usr/${B_LIBDIRS}:${SYSROOT}/${B_LIBDIRS}:${SYSROOT}/usr/X11R7/${B_LIBDIRS}:${SYSROOT}/usr/${B_LIBDIRS}/pulseaudio:${SYSROOT}/opt/qt-4/${B_LIBDIRS}:${SYSROOT}/opt/xfce/${B_LIBDIRS}"
  RPLINK=" -Wl,--rpath-link=${RPATH_LINK}";
  XCCOPT="${XCCOPT} ${RPLINK}"

  export CC_SYSROOT="--sysroot=${SYSROOT}/ ${XCCOPT} -L=/usr/${B_LIBDIRS} -L=/${B_LIBDIRS} -L=/usr/X11R7/${B_LIBDIRS} -I=/include -I=/usr/include -I=/usr/X11R7/include -I=/opt/xfce/include";
  CC="/usr/bin/${HOST}-gcc";
  CXX="/usr/bin/${HOST}-g++"
  LD="/usr/bin/${HOST}-ld"
  export CC CXX

  #XXX /build AKA ARCHROOT
  if [ ! "${ADDGCCDIR}" ] || [ "${ADDGCCDIR}" == "1" ];then
    GCCDIR=$( ${CC} ${CC_SYSROOT} -print-libgcc-file-name |sed -e "s/libgcc\.a$//" -e "s/x32\/$//" -e "s/32\/$//" )
    if [ "${GCCDIR}" ] && [ -d ${GCCDIR}/include ] && [ -d ${ARCHROOT}/${barch} ] && \
       [ ! -d ${ARCHROOT}/${barch}/${GCCDIR}/include ];then
      rsync -avPR ${GCCDIR}/ ${ARCHROOT}/${barch}/
      CFLAGS="${CFLAGS} -I${GCCDIR}/include";
     elif [ -d ${GCCDIR}/include ];then
      CFLAGS="${CFLAGS} -I${GCCDIR}/include";
     elif [ -d ${GCCDIR}/../include ];then
      CFLAGS="${CFLAGS} -I${GCCDIR}/../include";
    fi;
  fi;

  if [ ! "${LDISCC}" ] || [ "${LDISCC}" == "1" ];then
    LDFLAGS="${LDFLAGS} ${RPLINK}";
  fi;

  if [ "${ARFLAGS}" ];then
    export AR="${HOST}-ar ${ARFLAGS}"
   else
    export AR="${HOST}-ar"
  fi;
  export AS="${HOST}-as"
  export NM="${HOST}-nm"
  export RANLIB="${HOST}-ranlib"
  export OBJCOPY="${HOST}-objcopy"
  export STRIP="${HOST}-strip"
  export YACC="bison -y"

  if [ ${BUILDDIR} == "1" ];then
    if [ ! -d build-${barch} ];then
      mkdir build-${barch}
     elif [ "${CLEANOPT}" == "clean" ] || [ "${CLEANOPT}" == "distclean" ];then
      rm -rf build-${barch} > /dev/null 2>&1
      mkdir build-${barch}
    fi;
    cd build-${barch}
   elif [ "${NOCLEAN}" != "1" ];then
    if [ "${CLEANOPT}" == "clean" ];then
      /usr/bin/make ${CLEANOPT} > /dev/null 2>&1
     else
      (/usr/bin/make ${MAKEOPTS} ${ARCHOPT} distclean || /usr/bin/make ${MAKEOPTS} ${ARCHOPT} clean
       /usr/bin/make distclean || /usr/bin/make clean) > /dev/null 2>&1
       if [ -d .git ];then
         git reset --hard;git clean -x -f -d
       fi;
    fi;
  fi;

  if [ "${AUTORECONF}" ] && [ "${AUTORECONF}" == "1" ];then
    (cd ${TOPDIR};autoreconf)
  fi;

  export DIST_ROOT=${PKGBUILDDIR}/${barch}/${PKG}
  if [ -d ${DIST_ROOT} ];then
    rm -rf ${DIST_ROOT}
  fi;
  mkdir -p ${DIST_ROOT}

  export LDFLAGS CPPFLAGS CXXFLAGS CFLAGS MAKE_J

  if [ -x ${SCRIPTDIR}/make_${PROJECT} ];then
    export CC="${CC} ${CC_SYSROOT}"
    export CXX="${CXX} ${CC_SYSROOT}"
    ${SCRIPTDIR}/make_${PROJECT} ${barch} ${HOST} ${DIST_ROOT} ${CLEANOPT} || return 1
   elif [ -e ${TOPDIR}${CFGBIN}configure ] && [ "${PROJECT}" != "cmake" ];then
    if [ ! -x ${TOPDIR}${CFGBIN}configure ];then
      chmod 755 ${TOPDIR}${CFGBIN}configure
    fi;
    autoconf_cross_build ${TOPDIR} ${barch} ${HOST} || return 1;
   elif [ -e ${TOPDIR}${CFGBIN}./cmake ] || [ -e ${TOPDIR}${CFGBIN}/CMakeLists.txt ] || [ "${PROJECT}" == "cmake" ];then
    cmake_cross_build ${TOPDIR} ${barch} ${HOST} || return 1;
   elif [ -e ${TOPDIR}${CFGBIN}./Imakefile ];then
    imake_cross_build ${barch} || return 1;
   elif [ -e ${TOPDIR}${CFGBIN}./setup.py ];then
    if [ "${NARCH}" == "${barch}" ];then
      python setup.py clean --all
      python ${TOPDIR}${CFGBIN}./setup.py install --root=${DIST_ROOT} || return 1
     else
      /build/${barch}/usr/bin/python setup.py clean --all
      /build/${barch}/usr/bin/python ${TOPDIR}${CFGBIN}./setup.py install --root=${DIST_ROOT} || return 1
    fi;
   elif [ -e ${TOPDIR}${CFGBIN}./Makefile.PL ];then
     perl Makefile.PL ${CONFOPT}
     make ${MAKE_J} && make DESTDIR=${DIST_ROOT} install
   elif [ -e ${TOPDIR}${CFGBIN}./Build.PL ];then
     perl Build.PL destdir=${DIST_ROOT} ${CONFOPT}
     ./Build && ./Build install
   elif [ ! -e ${TOPDIR}${CFGBIN}configure ] &&
        [ ! -e configure ] &&
        [ ! -e ${TOPDIR}configure ] &&
        [ ! -e cmake ] &&
        [ ! -e ${TOPDIR}${CFGBIN}cmake ] &&
        [ ! -e ${TOPDIR}cmake ];then
    make_cc_destdir || return 1
   else
    pwd
    echo ${TOPDIR}${CFGBIN}
    echo "no build method"
    return 1
  fi;

  if [ ! -d ${STATDIR}/${barch}/done ];then
    mkdir -p ${STATDIR}/${barch}/done
  fi;

  if [ -e ${STATDIR}/${barch}/fail/${BUILDPROJECT} ];then
    rm ${STATDIR}/${barch}/fail/${BUILDPROJECT}
  fi;
  touch ${STATDIR}/${barch}/change
  touch ${STATDIR}/${barch}/done/${BUILDPROJECT}
  echo ${BUILDPROJECT} >> ${STATDIR}/${barch}/built

  #Move 64bit libs into lib64
  if [ "${FIXUPLIB}" == "1" ];then
    if [ "${B_LIBDIRS}" == "lib64" ];then
      for libdir in / /usr /usr/local ${PREFIX};do
        if [ -d ${DIST_ROOT}${libdir}/lib ];then
          if [ ! -d ${DIST_ROOT}${libdir}/lib64 ];then
            mkdir -p ${DIST_ROOT}${libdir}/lib64
          fi;
          mv ${DIST_ROOT}${libdir}/lib/* ${DIST_ROOT}${libdir}/lib64/
          rm -rf ${DIST_ROOT}${libdir}/lib
        fi; # sed -i -e "s/\(\-L=\)\/lib\//\/libx32\//g" ${DIST_ROOT}${libdir}/lib64/*.la
        libtool finish ${DIST_ROOT}${libdir}/lib64
      done;
     elif [ "${barch}" == "x86_32" ];then
      for libdir in / /usr /usr/local ${PREFIX};do
        if [ -d ${DIST_ROOT}${libdir}/lib ];then
          if [ ! -d ${DIST_ROOT}${libdir}/libx32 ];then
            mkdir -p ${DIST_ROOT}${libdir}/libx32
          fi;
          mv ${DIST_ROOT}${libdir}/lib/* ${DIST_ROOT}${libdir}/libx32/
          rm -rf ${DIST_ROOT}${libdir}/lib
        fi;
        if [ -d ${DIST_ROOT}${libdir}/lib64 ];then
          if [ ! -d ${DIST_ROOT}${libdir}/libx32 ];then
            mkdir -p ${DIST_ROOT}${libdir}/libx32
          fi;
          mv ${DIST_ROOT}${libdir}/lib64/* ${DIST_ROOT}${libdir}/libx32/
          rm -rf ${DIST_ROOT}${libdir}/lib64
        fi; 
        if [ -d ${DIST_ROOT}${libdir}/libx3264 ];then
          if [ ! -d ${DIST_ROOT}${libdir}/libx32 ];then
            mkdir -p ${DIST_ROOT}${libdir}/libx32
          fi;
          mv ${DIST_ROOT}${libdir}/libx3264/* ${DIST_ROOT}${libdir}/libx32/
          rm -rf ${DIST_ROOT}${libdir}/libx3264
        fi; # sed -i -e "s/\(\-L=\)\/lib\//\/libx32\//g" ${DIST_ROOT}${libdir}/libx32/*.la
        libtool finish ${DIST_ROOT}${libdir}/libx32
      done;
    fi;
  fi;

  if [ -d ${DIST_ROOT}/${ARCHROOT}/${barch} ];then
    rsync -avP ${DIST_ROOT}/${ARCHROOT}/${barch}/ ${DIST_ROOT}/ && rm -rf ${DIST_ROOT}/${ARCHROOT}
  fi;

  for pylib in python2.7 python3.3;do
    if [ ${B_LIBDIRS} != "lib" ] && [ -d ${DIST_ROOT}/usr/${B_LIBDIRS}/${pylib} ];then
      if [ ! -d ${DIST_ROOT}/usr/lib/${pylib}/ ];then
        mkdir -p ${DIST_ROOT}/usr/lib/${pylib}/
      fi;
      rsync -avP ${DIST_ROOT}/usr/${B_LIBDIRS}/${pylib}/ ${DIST_ROOT}/usr/lib/${pylib}/
      rm -rf ${DIST_ROOT}/usr/${B_LIBDIRS}/${pylib}/
      ln -s /usr/lib/${pylib} ${DIST_ROOT}/usr/${B_LIBDIRS}/${pylib}
    fi;
  done;

  #Postinstall hook
  if [ -e ${SRCDIR}/${PSOURCEDIR}/.build-info/post-install ];then
    sh ${SRCDIR}/${PSOURCEDIR}/.build-info/post-install ${barch} ${SRCDIR}/${PSOURCEDIR} ${DIST_ROOT}
  fi;

  #Dist conf process dist configs
  if [ "${DISTCONF}" ];then
    for dconf in ${DISTCONF};do
      if [ -f ${DIST_ROOT}/etc/${dconf} ];then
        mv ${DIST_ROOT}/etc/${dconf} ${DIST_ROOT}/etc/${dconf}.dist
      fi;
    done;
  fi

  #Build Distributibils
  tar_package ${DIST_ROOT} ${PKGDISTDIR}/${barch} ${PKG} > /dev/null 2>&1

  if [ "${barch}" == "${NARCH}" ];then
    if [ -d ${DIST_ROOT} ];then
      ${RSYNC} -avP ${DIST_ROOT}/ /
    fi;
#   elif [ "${barch}" == "x86_32" ] && [ "${NARCH}" == "x86_64" ];then
#    if [ -d ${DIST_ROOT}/${B_LIBDIRS} ];then
#      ${RSYNC} -avP ${DIST_ROOT}/${B_LIBDIRS} /
#    fi;
#    if [ -d ${DIST_ROOT}/usr/${B_LIBDIRS} ];then
#      ${RSYNC} -avP ${DIST_ROOT}/usr/${B_LIBDIRS} /usr/
#    fi;
  fi;

  if [ -d ${ARCHROOT}/${barch} ] && [ ! -h ${ARCHROOT}/${barch} ];then
    ${RSYNC} -avP ${DIST_ROOT}/ ${ARCHROOT}/${barch}/
  fi;

  if [ ! "${NODIET}" ];then
    NODIET=0;
  fi;

  (if [ "${DIETBUILD}" == "1" ] && [ "${NODIET}" != "1" ];then
    if [ "${BUILDDIR}" == "1" ];then
      cd ..
      rm -rf build-${barch}
     else
      (/usr/bin/make ${MAKEOPTS} ${ARCHOPT} distclean || /usr/bin/make ${MAKEOPTS} ${ARCHOPT} clean
      /usr/bin/make distclean || /usr/bin/make clean
      if [ -d .git ];then
        git reset --hard
        git clean -x -f -d
      fi;) > /dev/null 2>&1
    fi;
  fi;) || true
}

setup_build_dir() {
  cd ${SRCDIR}/${2}/${3}
  if [ -d build-${4}-${1}${5} ] && [ "${BOOTCLEAN}" ];then
    rm -rf build-${4}-${1}${5}
  fi;
  if [ -d ${TOOLDIR}/${4}/${1}/${3}${5} ] && [ "${BOOTCLEAN}" ];then
    rm -rf ${TOOLDIR}/${4}/${1}/${3}${5}
  fi;
  if [ ! -d build-${4}-${1}${5} ];then
    mkdir build-${4}-${1}${5}
  fi;
  cd build-${4}-${1}${5}
}

build_glibc() {
  if [ -e ${STATDIR}/${1}/done/glibc ];then
    return;
  fi;

  CLEANOPT=${BOOTCLEAN}

  if [ -x /usr/bin/${2}-gcc ];then
    GCCEH=`${2}-gcc -print-libgcc-file-name |sed 's/libgcc/&_eh/'`
    if [ ! -e ${GCCEH} ];then
      ln -s libgcc.a ${GCCEH}
    fi;
  fi;

  if [ ! -e /bin/pwd ] && [ -e /usr/bin/pwd ];then
    ln -s /usr/bin/pwd /bin/
  fi;

  #Setup Arch
  check_create_arch ${1}

  #Set dir correctly
  if [ "${1}" == "${NARCH}" ];then
    USELIBDIR=${NLIBDIR}
   else
    USELIBDIR=${B_LIBDIRS}
  fi;

  #building without gcc do so without SSP
  if [ ! -x /usr/bin/${2}-g++ ];then
    #dont build we are stuck on rerun ??
    if [ "${1}" == "${NARCH}" ] && [ -e /${USELIBDIR}/libc.so.6 ];then
      return 0;
     elif [ "${1}" != "${NARCH}" ] && [ -e ${ARCHROOT}/${USELIBDIR}/libc.so.6 ];then
      return 0;
    fi;
    build_project glibc ${1} libc_cv_ssp=no
    RES=$?
    #i want to rebuild this when i have toolchain
    if [ -e ${STATDIR}/${1}/done/glibc ];then
      rm ${STATDIR}/${1}/done/glibc
    fi;
   else
    build_project glibc ${1}
    RES=$?
  fi

  if [ -h ${GCCEH} ];then
    rm ${GCCEH}
  fi;
  if [ ${RES} != 0 ];then
    return 1;
  fi;

  #Create a static libc pkg
  SRDIR=${BASEROOT}/${1}
  if [ ! -d ${SRDIR} ];then
    mkdir -p ${SRDIR}/usr/include
  fi;
  if [ ! -d ${TOOLPKG}/${1}/${PKG} ];then
    mkdir -p ${TOOLPKG}/${1}/${PKG}
  fi;
  cd ${DIST_ROOT}
  rsync -a . ${SRDIR}/

  case ${1} in
    i[3-6]86)
      if [ ! -d ${ARCHROOT}/x86_64 ];then
        mkdir -p ${ARCHROOT}/x86_64
      fi;
      if [ ! -d ${ARCHROOT}/x86_32 ];then
        mkdir -p ${ARCHROOT}/x86_32
      fi;
      if [ ! -d ${BASEROOT}/x86_64 ];then
        mkdir -p ${BASEROOT}/x86_64
      fi;
      if [ ! -d ${BASEROOT}/x86_32 ];then
        mkdir -p ${BASEROOT}/x86_32
      fi;
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${ARCHROOT}/x86_64/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${BASEROOT}/x86_64/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${ARCHROOT}/x86_32/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${BASEROOT}/x86_32/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${ARCHROOT}/i686/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${BASEROOT}/i686/
    ;;
    x86_32)
      if [ ! -d ${ARCHROOT}/x86_64 ];then
        mkdir -p ${ARCHROOT}/x86_64
      fi;
      if [ ! -d ${BASEROOT}/x86_64 ];then
        mkdir -p ${BASEROOT}/x86_64
      fi;
      if [ ! -e usr/include/gnu/stubs-x32.h ];then
        ln -s stubs-64.h usr/include/gnu/stubs-x32.h
      fi;
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-x32.h ${ARCHROOT}/x86_64/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-x32.h ${BASEROOT}/x86_64/
    ;;
    x86_64)
      if [ ! -d ${ARCHROOT}/x86_32 ];then
        mkdir -p ${ARCHROOT}/x86_32
      fi;
      if [ ! -d ${BASEROOT}/x86_32 ];then
        mkdir -p ${BASEROOT}/x86_32
      fi;
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-64.h ${ARCHROOT}/x86_32/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-64.h ${BASEROOT}/x86_32/
    ;;
    powerpc)
      if [ ! -d ${ARCHROOT}/powerpc64 ];then
        mkdir -p ${ARCHROOT}/powerpc64
      fi
      if [ ! -d ${BASEROOT}/powerpc64 ];then
        mkdir -p ${BASEROOT}/powerpc64
      fi
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${ARCHROOT}/powerpc64/
      rsync -aR ${USELIBDIR} usr/${USELIBDIR} usr/include/gnu/stubs-32.h ${BASEROOT}/powerpc64/
  ;;
  esac;

  #Arch include dir
  if [ ! -d  /usr/${2}/include ];then
    mkdir -p /usr/${2}/include
    tar -C /usr/${2}/include --strip-components=1 -xf ${TOOLPKG}/${1}/kernel-headers.tar.xz
  fi;
  rsync -a usr/include /usr/${2}/include

  #C Lib Stubs
  if [ ! -d  /usr/${2}/${USELIBDIR} ];then
    mkdir -p /usr/${2}/${USELIBDIR}
  fi;
  rsync -avP usr/${USELIBDIR}/*.o /usr/${2}/${USELIBDIR}/

  tar -cJf ${TOOLPKG}/${1}/${PKG}/${PKG}-static.tar.xz usr/${USELIBDIR}/*.o usr/${USELIBDIR}/*.a usr/include
}

#Single configure template for bootstrap system
run_configure() {
  CONFLIBDIR=${1}
  shift;
  CONFPTH=${1}
  shift;
  ${CONFPTH}/configure --libdir=/usr/${CONFLIBDIR} --prefix=${PREFIX} --sysconfdir=/etc --mandir=/usr/share/man \
               --infodir=/usr/share/info --localstatedir=/var $@ || return 1
}

build_bootstrap_binutils() {
  barch=${1}
  eval `cat ${DEFDIR}/binutils`;
  AVER=VERSION_${1}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""
  BINUTILS=binutils${VERSEP}${VERSION}

  if [ "${1}" == "${NARCH}" ];then
    DIST_ROOT=${TOOLDIR}/${NARCH}/${BINUTILS}-static
    CSYSROOT="--with-sysroot=/"
   else
    DIST_ROOT=${TOOLDIR}/${NARCH}/${1}/${BINUTILS}
    CSYSROOT="--with-sysroot=${ARCHROOT}/${1}"
  fi;

  if [ -e /usr/bin/${2}-ld ] && [ -d ${DIST_ROOT} ];then
    return 0
  fi;

  git_load_pkg binutils ${VERSEP}${VERSION} distrotech-${BINUTILS} binutils || return 1
  ARCHOPTV=OPT_${1}
  ARCHOPT=${!ARCHOPTV}

  if [ "${1}" == "${NARCH}" ];then
    PROGPRE="";
    ARCHOPT="${ARCHOPT} LDFLAGS=-static";
    MAKEOPT="LDFLAGS=-all-static";
   else
    MAKEOPT="";
    PROGPRE="--program-prefix=${2}-";
  fi;

  setup_build_dir ${1} binutils ${BINUTILS} ${NARCH}
  export MAKEOPT
  run_configure ${B_LIBDIRS} .. ${PROGPRE} --target=${2} --build=${BUILD} --host=${BUILD} \
                ${CONFOPT} ${ARCHOPT} ${CSYSROOT} CC=${BUILD}-gcc || return 1
  make ${MAKE_J} configure-host || return 1
  make ${MAKE_J} -C bfd ${MAKEOPT} all || return 1
  make ${MAKE_J} -C libiberty ${MAKEOPT} all || return 1
  make ${MAKE_J} -C gold all || return 1
  make ${MAKE_J} ${MAKEOPT} all || make ${MAKEOPT} all || return 1
  make DESTDIR=${DIST_ROOT} all install || return 1

  if [ "${DIETBUILD}" == "1" ];then
     cd ${SRCDIR}/binutils/${BINUTILS}
     rm -rf build-${NARCH}-${1}
  fi;

  if [ "${1}" != "${NARCH}" ];then
    if [ ! -e /usr/bin/${2}-ld ];then
      rsync -aP ${DIST_ROOT}/ /
    fi;
    MULTIARCH=MARCH_${1}
    if [[ ${1} =~ ${!MULTIARCH} ]];then
      rsync -a ${DIST_ROOT}/usr/${2} ${BASEROOT}/${NARCH}/usr/;
    fi;
    tar_package ${DIST_ROOT} ${TOOLPKG}/${NARCH}/${1} ${BINUTILS} > /dev/null 2>&1
   else
    tar_package ${DIST_ROOT} ${TOOLPKG}/${NARCH} ${BINUTILS}-static > /dev/null 2>&1
  fi;
}

build_gcc_bootstrap() {
  barch=${1}
  eval `cat ${DEFDIR}/glibc`;
  AVER=VERSION_${1}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""
  GLIBC=glibc${VERSEP}${VERSION}

  if [ "${3}" ] && [ "${3}" != "${NARCH}" ];then
    TARCH=${3}
    arch_config ${3}
    TLIBDIR=${SETLIBDIR}
    THOST=${TUPPLE}
   else
    TARCH=${NARCH}
    THOST=${BUILD}
    TLIBDIR=${NLIBDIR}
  fi;

  eval `cat ${DEFDIR}/gcc`;
  AVER=VERSION_${1}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""
  GCC=gcc${VERSEP}${VERSION}

  if [ "${1}" != "${3}" ];then
    SYSROOT="--with-sysroot=${ARCHROOT}/${1} ${CONFOPTX}";
    BUILDROOT=${ARCHROOT}/${1}
   else
    SYSROOT="--with-sysroot=/";
    if [ -d ${ARCHROOT}/${1} ];then
      BUILDROOT=${ARCHROOT}/${1}
     else
      BUILDROOT=""
    fi
  fi;
  if [ ! "${4}" ] || [ "${4}" == "static" ];then
    MARCH=BOOTOPT_${1}
    CONFOPT="${BOOTOPT} ${SYSROOT}"
    CFLAGS=-fPIC
    CXXFLAGS=-fPIC
    LDFLAGS="-static -L/usr/${B_LIBDIRS}"
    SDIROPT=-boot
   elif [ "${4}" == "shared" ];then
    MARCH=BOOTOPT_${1}
    CONFOPT="${SHAREDOPT} ${SYSROOT} ${CONFOPTX}"
    CFLAGS=-fPIC
    CXXFLAGS=-fPIC
    SDIROPT=-shared
    LDFLAGS="-L/usr/${B_LIBDIRS} -L/usr/${NLIBDIR}";
   elif [ ! "${4}" ] || [ "${4}" == "null" ];then
    MARCH=BOOTOPT_${1}
    CONFOPT="${NULLOPT} ${SYSROOT} CC=${BUILD}-gcc CXX=${BUILD}-g++"
    CFLAGS=-fPIC
    CXXFLAGS=-fPIC
    SDIROPT=-null
    LDFLAGS="";
   elif [ "${4}" == "cross" ];then
    if [ "${1}" == "${TARCH}" ];then
      return;
    fi;
    MARCH=CROSSOPT_${1}
    GCCLANG=LANG_${1}
    LANGOPT=${!GCCLANG}
    CFLAGS=-I=/usr/include
    CXXFLAGS=-I=/usr/include
    LDFLAGS="-L/lib -L/libx32 -L/lib64 -L/usr/lib -L/usr/libx32 -L/usr/lib64"
    export CFLAGS CXXFLAGS
    CONFOPT="${CONFOPT} --with-jvm-root-dir=/usr/${TLIBDIR}/jvm/gcj-jdk-${1} --enable-cxx-flags=-I=/usr/include
             CFLAGS=-I=/usr/include ${LANGOPT} ${SYSROOT}"
    SDIROPT=-cross
  fi;
  TARGPKG=${GCC}${SDIROPT}

  if [ "${TARCH}" == "${1}" ];then
    GCCBOOTDEST=${TOOLDIR}/${TARCH}/${TARGPKG}
    PROGPRE="";
    USELIBDIR=${TLIBDIR}
   else
    GCCBOOTDEST=${TOOLDIR}/${TARCH}/${1}/${TARGPKG}
    PROGPRE="--program-prefix=${2}-";
    USELIBDIR=${B_LIBDIRS}
  fi;

  if [ -d ${GCCBOOTDEST} ] && [ -e /usr/bin/${2}-gcc ];then
    return;
  fi;

#  if which ${2}-gcc 2>/dev/null;then
#    GCCLDIR=$( dirname `${2}-gcc --print-libgcc-file-name` )
#    if [ -d ${GCCLDIR} ];then
#      for booto in crti.o crt1.o crtn.o;do
#        if [ -f /usr/${USELIBDIR}/${booto} ];then
#          cp ${BUILDROOT}/usr/${USELIBDIR}/${booto} ${GCCLDIR}/
#        fi;
#      done;
#      CONFOPT="${CONFOPT} --with-stage1-ldflags=-L${GCCLDIR} --with-boot-ldflags=-L${GCCLDIR} CFLAGS=-B${GCCLDIR}";
#    fi;
#  fi;

  git_load_pkg gcc ${VERSEP}${VERSION} distrotech-${GCC} gcc

  setup_build_dir ${1} gcc ${GCC} ${TARCH} ${SDIROPT}

  #Use GLIBC/Kern headers only [Virgin] / Build dir / sysroot
  SRDIR=${BASEROOT}/${1}
  if [ -d ${PKGBUILDDIR}/${1}/${GLIBC}/usr/include ] && [ -d ${SRDIR}/usr/include/linux ] &&
     [ "${4}" == "static" ];then
    BUILDDIR=${SRDIR}
    (cd ${PKGBUILDDIR}/${1}/${GLIBC}
    rsync -avP ${PKGBUILDDIR}/${1}/${GCC}/ ${SRDIR}/
    rsync -avPR . usr/include ${SRDIR}/
    if [ ! -d ${TOOLPKG}/${1}/${GLIBC} ];then
      mkdir -p ${TOOLPKG}/${1}/${GLIBC}
    fi;
    tar -cJf ${TOOLPKG}/${1}/${GLIBC}/${GLIBC}-headers.tar.xz usr/include)
   elif [ -d ${ARCHROOT}/${1}/ ] && [ ! -h ${ARCHROOT}/${1} ];then
    BUILDDIR=${ARCHROOT}/${1}/
   else
    BUILDDIR=/
  fi;

#  if [ -x /usr/bin/${HOST}-gcc ] && [ -x /usr/bin/${HOST}-g++ ];then
#    CC=${HOST}-gcc
#    CXX=${HOST}-g++
#    SET_BUILD=${HOST}
#   else
#    CC=${BUILD}-gcc
#    CXX=${BUILD}-g++
#    SET_BUILD=${BUILD}
#  fi;

  export CFLAGS CXXFLAGS LDFLAGS
  run_configure ${USELIBDIR} .. ${PROGPRE} --build=${BUILD} --host=${THOST} --target=${2} --with-build-sysroot=${BUILDDIR} \
                ${CONFOPT} ${!MARCH} || return 1

  if [ ! -d ${2}/libstdc++-v3 ];then
    mkdir -p ${2}/libstdc++-v3
  fi;
  cp /usr/bin/libtool ${2}/libstdc++-v3
  make ${MAKE_J} LDFLAGS="${LDFLAGS}" || make LDFLAGS="${LDFLAGS}" || return 1
  make DESTDIR=${GCCBOOTDEST} install || return 1

  #Setup some missing bits
  if [ -e ${SRCDIR}/gcc/${GCC}/.build-info/post-install ];then
    sh ${SRCDIR}/gcc/${GCC}/.build-info/post-install ${1} ${SRCDIR}/gcc/${GCC} ${GCCBOOTDEST}
  fi;

  if [ "${DIETBUILD}" == "1" ];then
     cd ${SRCDIR}/gcc/${GCC}
     rm -rf build-${TARCH}-${1}${SDIROPT}
  fi;

#Build javac
#gcj -Wl,-Bsymbolic -findirect-dispatch --main=org.eclipse.jdt.internal.compiler.batch.Main \
#    /usr/share/java/ecj-3.5.2.jar -o ${3}/usr/bin/javac 
#x86_64-linux-gnu-gcj -mx32 -Wl,-Bsymbolic -findirect-dispatch --main=org.eclipse.jdt.internal.compiler.batch.Main
#/usr/share/java/ecj-3.5.2.jar -L/dist/build/x86_64/gcc-git/usr/libx32 -lgcj -lgcj_bc -o /usr/bin/javac-x3
  
  if [ "${1}" == "${TARCH}" ];then
    ln -s gcc ${GCCBOOTDEST}/usr/bin/cc
    tar_package ${GCCBOOTDEST} ${TOOLPKG}/${TARCH} ${TARGPKG} > /dev/null 2>&1
    #Fill the gap till full gcc built
    if [ "${TARCH}" == "${NARCH}" ] && [ ! -e ${STATDIR}/${TARCH}/done/gcc ];then
      rsync -aP ${GCCBOOTDEST}/ /
      if [ "${4}" == "shared" ];then
        (rm ${STATDIR}/${1}/done/gmp ${STATDIR}/${1}/done/mpfr ${STATDIR}/${1}/done/mpc \
            /usr/${NLIBDIR}/libgmp.a /usr/${NLIBDIR}/libgmpxx.a /usr/${NLIBDIR}/libppl.a \
            /usr/${NLIBDIR}/libppl_c.a /usr/${NLIBDIR}/libpwl.a /usr/${NLIBDIR}/libisl.a \
            /usr/${NLIBDIR}/libcloog-isl.a) >/dev/null 2>&1
      fi;
    fi;
   else
    tar_package ${GCCBOOTDEST} ${TOOLPKG}/${TARCH}/${1} ${TARGPKG} > /dev/null 2>&1
    if [ "${TARCH}" == "${NARCH}" ];then
      #Install if there is no existing compiler or im the cross
      if [ ! -e /usr/bin/${2}-gcc ] || [ "${4}" == "cross" ];then
        rsync -aP ${GCCBOOTDEST}/ /
        if [ "${4}" != "cross" ];then
          touch /usr/bin/${2}-gcc.${4}
         else
          for stamp in null boot shared;do
            if [ -e /usr/bin/${2}-gcc.${stamp} ];then
              rm /usr/bin/${2}-gcc.${stamp}
            fi;
          done
          if [ -e ${STATDIR}/${1}/done/libtool ];then
            rm ${STATDIR}/${1}/done/libtool
          fi;
        fi;
       elif [ -e /usr/bin/${2}-gcc.null ] && [ "${4}" == "boot" ];then
        rsync -aP ${GCCBOOTDEST}/ /
        touch /usr/bin/${2}-gcc.boot
        rm /usr/bin/${2}-gcc.null
       elif [ -e /usr/bin/${2}-gcc.null ] && [ "${4}" == "shared" ];then
        rsync -aP ${GCCBOOTDEST}/ /
        touch /usr/bin/${2}-gcc.shared
        rm /usr/bin/${2}-gcc.null
        if [ -e ${STATDIR}/${1}/done/libtool ];then
          rm ${STATDIR}/${1}/done/libtool
        fi;
       elif [ -e /usr/bin/${2}-gcc.boot ] && [ "${4}" == "shared" ];then
        rsync -aP ${GCCBOOTDEST}/ /
        touch /usr/bin/${2}-gcc.${4}
      fi;
    fi;
  fi;
  return 0
}

build_qemu_static() {
  barch=${1}
  eval `cat ${DEFDIR}/qemu`;
  AVER=VERSION_${NARCH}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""
  QEMU=qemu${VERSEP}${VERSION}
  export PREFIX

  export PKG_CONFIG_PATH="/${NLIBDIR}/pkgconfig:/usr/${NLIBDIR}/pkgconfig:/opt/apache2/${NLIBDIR}/pkgconfig:/usr/share/${NLIBDIR}/pkgconfig:/usr/X11R7/${NLIBDIR}/pkgconfig:/lib/pkgconfig:/usr/lib/pkgconfig:/opt/qt-4/${NLIBDIR}/pkgconfig:/opt/xfce/${NLIBDIR}/pkgconfig";
  DIST_PKG=${TOOLPKG}/${NARCH}/${QEMU}-static.tar.xz
  if [ -d ${TOOLDIR}/${NARCH}/${QEMU} ] && [ -f ${DIST_PKG} ];then
    return
  fi;
  git_load_pkg qemu ${VERSEP}${VERSION} distrotech-${QEMU}

  (git_load_pkg qemu ${QEMU}) || return 1
  setup_build_dir ${NARCH} qemu ${QEMU} ${NARCH}

  run_configure ${NLIBDIR} .. --static --disable-system --disable-user --enable-linux-user --disable-werror \
                --target-list=arm-linux-user,mips-linux-user,mips64-linux-user,ppc-linux-user,ppc64-linux-user \
                --cc=${BUILD}-gcc || return 1
  make ${MAKE_J} || make || return 1

  mkdir -p ${TOOLDIR}/${NARCH}/${QEMU}/usr/bin
  for arch in arm mips ppc ppc64;do
    if [ "${arch}" != "${NARCH}" ];then
      uemu=${arch}-linux-user/qemu-${arch};
      cp ${uemu} ${TOOLDIR}/${NARCH}/${QEMU}/usr/bin/qemu-${arch}-static
    fi;
  done

  if [ "${DIETBUILD}" == "1" ];then
     cd ${SRCDIR}/qemu/${QEMU}
     rm -rf build-${NARCH}-${1}
  fi;

  rsync -aP --exclude=/usr/bin/qemu-${NARCH}-static ${TOOLDIR}/${NARCH}/${QEMU}/ /
  (cd ${TOOLDIR}/${NARCH}/${QEMU};tar -cJf ${DIST_PKG} *)
}

build_packages() {
  DARCH=${1}
  shift

  for pkg in $@;do
    if [ ! -e ${STATDIR}/${DARCH}/done/${pkg} ] || [ ${DEFDIR}/${pkg} -nt ${STATDIR}/${DARCH}/done/${pkg} ];then
      #If we fail on 1st pass rebuild with no clean opt's
      if ! (CLEANOPT=${BOOTCLEAN};build_project ${pkg} ${DARCH});then
        (unset CLEANOPT;build_project ${pkg} ${DARCH}) || return 1
      fi;
    fi;
  done;
}

build_static_tool() {
  barch=${1}
  eval `cat ${DEFDIR}/${4}`;
  AVER=VERSION_${1}
  if [ "${!AVER}" ];then
    VERSION=${!AVER}
  fi;
  eval ${AVER}=""
  STATICTOOL=${4}${VERSEP}${VERSION}

  PATH=${PATH}:.

  if [ -d ${TOOLDIR}/${1}/${STATICTOOL}-static ];then
    return
  fi;

  echo "Building ${4}"

  if [ ! "${GITREPO}" ];then
    export GITREPO=${4}
  fi;
  if [ ! "${GITBRANCH}" ];then
    export GITBRANCH="distrotech-${STATICTOOL}";
  fi
  git_load_pkg ${4} ${VERSEP}${VERSION} ${GITBRANCH} ${GITREPO}

  if [ -d ${SRCDIR}/${4}/${STATICTOOL}/build-${1}-static ];then
    rm -rf ${SRCDIR}/${4}/${STATICTOOL}/build-${1}-static
  fi;

  if [  "${4}" != "subversion" ];then
    ARCHOPTV=OPT_${1}
    ARCHOPT=${!ARCHOPTV}
   else
    ARCHOPT="--with-neon=${ARCHROOT}/${1}/usr/ --with-apr-util=${ARCHROOT}/${1}/usr/";
  fi;

  if [ "${CFGPTH}" ];then
    CFGPTH="/${CFGPTH}"
   else
    CFGPTH="";
  fi;

  if [ "${BUILDDIR}" ] && [ "${BUILDDIR}" == "0" ];then
    cd ${SRCDIR}/${4}/${STATICTOOL}${CFGPTH}
    CFG_BIN=.
   else
    mkdir ${SRCDIR}/${4}/${STATICTOOL}${CFGPTH}/build-${1}-static 
    cd ${SRCDIR}/${4}/${STATICTOOL}${CFGPTH}/build-${1}-static
    CFG_BIN=..
  fi;

  run_configure ${3} ${CFG_BIN} --build=${BUILD} --host=${2} ${STATICOPT} ${ARCHOPT} || return 0

  if [ "${4}" == "binutils" ];then
    make ${MAKE_J} configure-host
  fi;

  if [ -x libtool ];then
    cp ${ARCHROOT}/${1}/usr/bin/libtool ./
  fi;

  #Texinfo hack Add po to the list too
  for gnulib in gnulib/lib/ tools/gnulib/lib/ po;do
    if [ -d ${gnulib} ];then
      make ${MAKE_J} -C ${gnulib} || make -C ${gnulib}
    fi;
  done;

  if [ ! "${SYSROOTFIXUP}" ];then
    SYSROOTFIXUP="1";
  fi;
  export SYSROOTFIXUP;
  sysroot_fixup ${1}

  #Postconfig hook
  if [ -e ${SRCDIR}/${4}/${STATICTOOL}/.build-info/post-config ];then
    sh ${SRCDIR}/${4}/${STATICTOOL}/.build-info/post-config ${1} ${SRCDIR}/${4}/${STATICTOOL} ${TOOLDIR}/${1}/${STATICTOOL}-static
  fi;

  make ${MAKE_J} ${STATICMOPT} || make ${STATICMOPT} || return 0
  make ${STATICMOPT} DESTDIR=${TOOLDIR}/${1}/${STATICTOOL}-static install || return 0

  #Postinstall hook
  if [ -e ${SRCDIR}/${4}/${STATICTOOL}/.build-info/post-install ];then
    sh ${SRCDIR}/${4}/${STATICTOOL}/.build-info/post-install ${1} ${SRCDIR}/${4}/${STATICTOOL} ${TOOLDIR}/${1}/${STATICTOOL}-static
  fi;

  if [ "${STATICINSTLIBS}" ] && [ "${STATICINSTLIBS}" == "1" ];then
    if [ -d ${ARCHROOT}/${1} ];then
      rsync -avP ${TOOLDIR}/${1}/${STATICTOOL}-static/usr/${3}/*.a ${ARCHROOT}/${1}/usr/${3}/
     else
      rsync -avP ${TOOLDIR}/${1}/${STATICTOOL}-static/usr/${3}/*.a /usr/${3}/
    fi;
  fi;

  if [ "${DIETBUILD}" == "1" ];then
     cd ${SRCDIR}/${4}/${STATICTOOL}
     rm -rf build-${1}-static
  fi;

  tar_package ${TOOLDIR}/${1}/${STATICTOOL}-static ${TOOLPKG}/${1} ${STATICTOOL}-static > /dev/null 2>&1
}

static_toolbuild() {
  if [ "${1}" != "${NARCH}" ];then
    arch_config ${1}
    TLIBDIR=${SETLIBDIR}
    TARGET=${TUPPLE}
   else
    TLIBDIR=${NLIBDIR}
    TARGET=${BUILD}
  fi;
  for stool in bison flex sed gawk bash make coreutils nano rsync grep less gzip tar xz texinfo \
      pkg-config util-linux diffutils libtool gperf m4 cpio git;do
    (build_static_tool ${1} ${TARGET} ${TLIBDIR} ${stool})
  done;
}

bootstrap_arch() {
  for arch in $@;do
    if [ "${arch}" == "${NARCH}" ];then
       continue;
    fi;

    arch_config ${arch}

    #build binutils if needed
    if [ ! -x /usr/bin/${TUPPLE}-ld ];then
      (build_bootstrap_binutils ${arch} ${TUPPLE}) || return 1
    fi;

    #Build null compiler if needed
    if [ ! -x /usr/bin/${TUPPLE}-gcc ];then
      (build_gcc_bootstrap ${arch} ${TUPPLE} ${NARCH} null) || return 1
    fi;

    #build glibc and dependandcies for arch
    if [ ! -e ${ARCHROOT}/${arch}/${SETLIBDIR}/libc.so.6 ];then
      (build_glibc ${arch} ${TUPPLE}) || return 1
    fi;
  done;

  #Build native GCC we called here 1st to bootstrap native may need to rebuild libtool
  if [ ! -e ${STATDIR}/${NARCH}/done/gcc ] && [ -e ${STATDIR}/${NARCH}/done/libtool ];then
    DELLIBTOOL=${STATDIR}/${NARCH}/done/libtool
   else
    DELLIBTOOL="";
  fi
  (check_create_arch ${NARCH}
  build_packages ${NARCH} gcc) || return 1
  if [ "${DELLIBTOOL}" ];then
    rm ${DELLIBTOOL}
  fi;

  #Build cross compilers
  for arch in $@;do
    (check_create_arch ${arch}
    #Build a full cross compiler if not native
    if [ "${arch}" != "${NARCH}" ];then
      build_packages ${arch} zlib libtool || exit 1

      #Build shared compiler with support libs
      (build_gcc_bootstrap ${arch} ${HOST} ${NARCH} shared) || return 1

      #Rebuild libtool
      build_packages ${arch} libtool || exit 1
      #Build full cross compiler
      (build_gcc_bootstrap ${arch} ${HOST} ${NARCH} cross) || exit 1
      case ${NARCH} in
        x86_*)
          case ${arch} in
            i[3-6]86|x86_*)rsync -avP /usr/${B_LIBDIRS}/libstdc++* /usr/${HOST}/${B_LIBDIRS}/;;
          esac;
        ;;
      esac;
    fi;

    #GCC needs system zlib glibc can use selinux/gd
    BOOTCLEAN=distclean
    build_packages ${arch} libtool pcre ustr bzip2 libaudit selinux libpng expat libxml2 freetype fontconfig \
      jpeg tiff gd glibc tzdata gmp mpfr mpc isl cloog gcc ncurses ncursesw slang nettle libtasn1 \
      libffi p11-kit libidn gnutls libgpg-error libgcrypt libprelude libtirpc flex Linux-PAM \
      util-linux || exit 1) || return 1;

  done;
}

setup_ldconf() {
  for arch in $@;do
    if [ "${arch}" == "${NARCH}" ];then
      continue
    fi
    arch_config ${arch}
    if [ ! -e /etc/ld.so.conf.d/${arch}.conf ];then
      (cat <<EOF
/build/${arch}/${SETLIBDIR}
/build/${arch}/usr/${SETLIBDIR}
/build/${arch}/usr/X11R7/${SETLIBDIR}
EOF
      ) > /etc/ld.so.conf.d/${arch}.conf
    fi;
  done;
  /sbin/ldconfig >/dev/null 2>&1
}

build_glibc_march() {
  #GCC C build to bootstrap multiarch
  case ${1} in
    x86_32|x86_64)(bootstrap_arch i686 x86_32 x86_64) || return 1
           if [ "${1}" == "${NARCH}" ];then
             (setup_ldconf i686 x86_32 x86_64)
           fi;
    ;;
    powerpc64)(bootstrap_arch powerpc powerpc64) || return 1;
           if [ -d ${ARCHROOT}/${1} ] && [ -e ${STATDIR}/powerpc/done/glibc ] && \
              [ ! -e ${ARCHROOT}/${1}/usr/lib/libc.so ];then
             rm ${STATDIR}/powerpc/done/glibc
           fi;
           (build_glibc powerpc powerpc-linux-gnu) || return 1
           if [ "${1}" == "${NARCH}" ];then
             (setup_ldconf powerpc powerpc64)
           fi;
    ;;
    *)(bootstrap_arch ${1}) || return 1;;
  esac
}

build_dependancies() {
  #Base dependancies
  build_packages ${1} groff gdbm perl gperf gettext make sed ncursesw ncurses texinfo zlib binutils libsigsegv \
    m4 diffutils attr acl pcre libaudit selinux file gengetopt libidn libtasn1 p11-kit nettle gnutls \
    libgpg-error libgcrypt libprelude libtirpc Linux-PAM libcap bison flex gawk coreutils readline bash xz expat openssl wget iana-etc || return 1

  #Dont build libxml2 if there is a python in / may not be one in /build/.../
  if [ ! -d /usr/lib/python2.7 ];then
    build_packages ${1} expat libxml2 libxslt || return 1
  fi;

  #Add required perl modules from cpan may not need libxml only expat !!!
  for pmod in XML::Parser XML::SAX Font::TTF XML::Simple Archive::Zip Pod::Simple::Search YAML;do
    if [ ! -e ${STATDIR}/${1}/done/${pmod} ];then
      cpan -i ${pmod} && touch ${STATDIR}/${1}/done/${pmod}
    fi;
  done

  build_packages ${1} intltool popt rsync bzip2 nspr sqlite-autoconf nss openssl Python libcap-ng ply expat libxml2 libxslt gnome-doc-utils \
    docbook-4.1.2 docbook-4.2 docbook-4.3 docbook-4.4  docbook-4.5 docbook-xsl scrollkeeper which libffi dbus glib \
    gtk-doc pkg-config libcroco libassuan libksba pth libusb libusb-compat gnupg trousers onig slang || return 1

  #Rebuild libxml2 with Python support
  if [ ${STATDIR}/${1}/done/Python -nt ${STATDIR}/${1}/done/libxml2 ] || \
     [ ${STATDIR}/${1}/done/Python -nt ${STATDIR}/${1}/done/libxslt ];then
    for delstamp in libxml2 libxslt;do
      rm ${STATDIR}/${1}/done/${delstamp}
    done;
    build_packages ${1} libxml2 libxslt || return 1
  fi;

  if [ ! -e ${STATDIR}/${1}/done/util-linux ];then
    rm /usr/lib64/libblkid.a /usr/lib64/libuuid.a /usr/lib64/libblkid.la /usr/lib64/libuuid.la >/dev/null 2>&1
  fi;

  build_packages ${1} util-linux nano rsync grep less gzip tar pkg-config cpio iana-etc xmlto xmltoman giflib freetype \
    fontconfig fonttools lcms2 jpeg libpng tiff libmng OpenSP c-ares curl git || return 1

  #This will fail due to Mesa so dont bail only do it on first pass use build_project directly
  if [ ! -e ${STATDIR}/${1}/fail/Xorg ] && [ ! -e ${STATDIR}/${1}/done/Xorg ];then
    (CLEANOPT=distclean
     build_project Xorg ${1}) || touch ${STATDIR}/${1}/fail/Xorg
    if [ "${1}" == "${NARCH}" ];then
      /sbin/ldconfig >/dev/null 2>&1
    fi;
  fi;

  build_packages ${1} cairo gobject-introspection icu4c cmake openjpeg openjpeg1 graphite2 kelbt ragel harfbuzz pango vala \
    libdrm intltool llvm clang talloc tevent libevent libverto krb5 libdaemon avahi-nogui cups ghostscript gs-fonts ijs kmod  \
    module-init-tools LVM2 cryptsetup libmicrohttpd systemd Mesa glu glw glew mtdev fontforge atk gdk-pixbuf librsvg libssh || return 1

  (gdk-pixbuf-query-loaders --update-cache
  pango-querymodules --update-cache) >/dev/null 2>&1
  build_packages ${1} gtk+ freeglut pcsc-lite || return 1

  #GTK3
  build_packages ${1} wayland libxkbcommon at-spi2-core at-spi2-atk || return 1

  #we need gdk-pixbuf/librsvg built with gtk3 to build gtk33 bootstrap it [dont build demos/tests/examples on 1st pass]
  if [ ! -d /usr/${B_LIBDIRS}/gtk-3.0 ] && [ "${1}" == "${NARCH}" ];then
    build_packages ${1} gtk3 || return 1
    to_redo="gdk-pixbuf librsvg gtk3";
    for redo in ${to_redo};do
      rm ${STATDIR}/${1}/done/${redo}
    done
    build_packages ${1} ${to_redo} || return 1
   else
    build_packages ${1} gtk3 || return 1
  fi;


  (gtk-query-immodules-3.0 --update-cache
  glib-compile-schemas /usr/share/glib-2.0/schemas) >/dev/null 2>&1

  #Continue X Build with GL/Mesa
  if [ -e ${STATDIR}/${1}/fail/Xorg ];then
    if [ ! -e ${STATDIR}/${1}/done/glamor ];then
      (unset CLEANOPT;build_project Xorg ${1})
      (build_project glamor ${1}) || return 1
    fi;
    (unset CLEANOPT;build_project Xorg ${1}) || return 1
  fi;

  if [ "${1}" == "${NARCH}" ];then
    /sbin/ldconfig >/dev/null 2>&1
    #install icmake on native for yodl
    build_packages ${1} icmake || return 1
  fi;

  build_packages ${1} glamor Xorg poppler poppler-data qpdf cups-filters foomatic-filters patch alsa-lib fastjar yasm nasm fuse libunistring \
    txt2man printproto libnl-1 libnl libpcap ppp libIDL ORBit2 dbus-glib dbus-python GConf libbonobo libatomic_ops gc guile autogen \
    libmad Xaw3d gv rtmpdump mozjs polkit polkit-gnome yodl swig M2Crypto wireless-regdb crda|| return 1

  #Build openjdk on native
  if [ "${NARCH}" == "${1}" ];then
    build_packages ${1} icedtea7 || return 1
  fi;

  build_packages ${1} apr apr-iconv sqlite-autoconf keyutils neon apache-ant tcl8 tk8 db unixODBC cyrus-sasl openslp openldap mysql \
    postgresql apr-util httpd subversion libva gmerlin jasper libraw1394 orc libogg libvorbis libkate gnome-mime-data gnome-vfs \
    libvisual gstreamer gstreamer-1 v4l-utils audiofile esound flac libsndfile json-c fftw \
    libsamplerate speex pulseaudio SDL SDL2 libdc1394 OpenCV frei0r libtheora gst-plugins-base gst-plugins-base-1 libavc1394 libiec61883 \
    faac libaacplus vo-aacenc vo-amrwbenc fribidi libass libbluray celt libcaca gsm modplug lame twolame libnut \
    opencore-amr opus schroedinger utvideo openal xvidcore ptlib libcddb libcdio-cdda libcdio fltk libnfnetlink \
    libmnl libexif exif libnetfilter_conntrack libao libtimidity libnetfilter_cttimeout ilmbase gss iptables \
    usbutils xavs x264 libvpx fdk-aac libmpeg2 a52dec ffmpeg h323plus gnugk t38modem qt-4 py2cairo pygobject libglade pygtk \
    autoconf automake-1.9 automake-1.10 automake-1.11 automake-1.12 automake-1.13 automake-1.14 help2man rrdtool avahi djvulibre \
    libarchive cogl json-glib pciutils net-snmp sane-backends libvdpau LibVNCServer i2c-tools openexr ImageMagick \
    libungif libiodbc tdb libcanberra libgnome-keyring pangox-compat mhash libmcrypt vim || return 1

  #Core Utilities
  build_packages ${1} arptables autofs cdrtools cifs-utils dialog dosfstools e2fsprogs ebtables ethtool gptfdisk htop \
    inetutils iproute2 ipsec-tools ipvsadm iw grub lesspipe linux_logo lm_sensors lsof lynx lzo mgetty minicom mktemp mtools \
    net-tools newt nfs4-acl-tools libnfsidmap nfs-utils ntfs-3g ntp openssh parted procinfo-ng procps psmisc squashfs \
    strace sudo sysfsutils sysklogd sysvinit tcpdump tftp-hpa unrar uudeview usbhid-dump vlan watchdog wireless_tools \
    xorriso apg archivemount bc bindfs bsd-finger cdde dcron dmraid ecryptfs-utils ed fbset fdutils fetchmail \
    foomatic-filters globe hdparm hfsutils joe logcheck logrotate mailutils libpipeline man-db man-pages mdadm mrouted \
    mcelog mt-st p7zip phoon pimd procmail quagga quota-tools radvd rp-pppoe screen sdparm setserial sharutils \
    usb-modeswitch usb-modeswitch-data xterm Pyrex bzr cdrdao bash-completion libgusb colord cvs dash dcd dmake faad2 frox \
    gaa gdb gpm igmpproxy iksemel imap ippool ipv6calc kbd keepalived lksctp-tools libid3tag madplay man2html mercurial \
    mrtg nmap openl2tp freeradius-server freeradius-client memcached libmemcached opensips openvpn pine psqlodbc rpcbind \
    sendmail sox sqliteodbc stund hostapd wpa_supplicant libnetfilter_cthelper libnetfilter_queue conntrack-tools \
    libnetfilter_acct libnetfilter_log nfacct ulogd mpg123 || return 1

  build_packages ${1} gnustep-make gnustep-base SOPE acpid bind clamav coova-chilli dhcp dovecot freetds hylafax mcrypt mm  \
    nss-mdns nss_ldap pam_ldap proftpd radius samba sipsak squid squidGuard tnef webalizer wine libdvdcss libdvdread \
    libdvdnav MPlayer clucene-core libzip mdds boost libixion liborcus || return 1

  #Desktop (Gnome / apps)
  build_packages ${1} gnome-common glade libnotify startup-notification shared-mime-info libwnck vte gnome-keyring \
    gnome-desktop libopenraw iso-codes libxkbfile libxklavier xpdf icon-naming-utils gnome-icon-theme eog aterm file-roller \
    libgsf wv hunspell enchant abiword libart libgnome libgnomecanvas libbonoboui libgnomeui gcalctool gucharmap leafpad \
    ffmpegthumbnailer glib-networking libsoup gsettings-desktop-schemas gtk-engines gnome-themes-standard libsecret \
    libunique evince || return 1

  #Linphone
  build_packages ${1} oRTP spandsp mediastreamer2 bcg729 msamr libilbc msilbc msx264 mssilk libosip2 exosip linphone || return 1

  #Other bits
  build_packages ${1} alsa-oss alsa-plugins alsa-tools alsa-utils TiMidity calamaris dirac ruby netatalk mod_perl \
    mod_python nut omniORB dtc qemu asciidoc doxygen wxWidgets taglib xerces-c || return 1


  #XFCE
  build_packages ${1} xfce4-dev-tools libxfce4util xfconf libxfce4ui garcon exo xfce4-panel tumbler \
    Thunar xfce4-settings xfce4-session xfwm4 xfdesktop xfce4-appfinder gtk-xfce-engine Terminal \
    thunar-volman xfce4-taskmanager xfce4-dict xfce4-mixer xfwm4-themes xfce4-icon-theme \
    tango-icon-theme hicolor-icon-theme gnome-themes || return 1

#XXX
  #Evolution/Epiphany
  build_packages ${1} libgdata libgweather libpst geoclue libical libwebp gtkhtml gtkimageview \
    evolution-data-server clutter clutter-gtk evolution webkitgtk epiphany || return 1

  #Mono if bootstrap good
  if [ -x /usr/bin/gmcs ];then
    build_packages ${1} mono || return 1
  fi;
#gtkspell openr2 dblatex

  #Distrotech apps
#missing taploop repositroy
  build_packages ${1} easter dtsapplib dtscon macmask clamctrl modemtest pubkey2ssh simpletun stun-c \
    dtsguiapp || return 1

  #Other GUI apps
  build_packages ${1} FreeRDP vte3 Remmina pycups desktop-file-utils system-config-printer sip PyQt-x11 \
    python-notify notify-python reportlab hplip mm-common libsigcxx2 libtorrent rtorrent djview4 \
    gnuchess ctl CTL openexr_ctl openexr_viewers xmlcopyeditor dia || return 1

  #Other Packages
  build_packages ${1} memtest86 liberation-fonts dejavu-fonts unifoundry psutils php-src docutils po4a isoquery syslinux|| return 1

  #DirectFB
  build_packages ${1} flux DirectFB SDL_net SDL_image smpeg SDL_mixer SDL2_net SDL2_image smpeg2 SDL2_mixer || return 1

  #GST Plugins
  build_packages ${1} gst-plugins-good gst-plugins-ugly gst-plugins-bad gst-plugins-good-1 gst-plugins-ugly-1 gst-plugins-bad-1 || return 10

  #Voip libs
#  build_packages ${1} openr2 libpri libss7 || return 1

#XXX
#PyQt-x11 sip

  #Time to build a static gcc bootstrap distributable
  (build_gcc_bootstrap ${1} ${2} ${1} static) || return 1

  #Static binutils distributable
  (build_bootstrap_binutils ${1} ${2}) || return 1

  #Shared GCC C/C++/ADA distributable
  (build_gcc_bootstrap ${1} ${2} ${1} shared) || return 1


  #Build tools needed for compiling
  static_toolbuild ${1} ${2}
}

sync_ml_libs() {
  if [ "${1}" == "x86_32" ] && [ "${NARCH}" == "x86_64" ];then
    if [ -d ${DIST_ROOT}/${B_LIBDIRS} ];then
      ${RSYNC} -avP ${DIST_ROOT}/${B_LIBDIRS} /
    fi;
    if [ -d ${DIST_ROOT}/usr/${B_LIBDIRS} ];then
      ${RSYNC} -avP ${DIST_ROOT}/usr/${B_LIBDIRS} /usr/
    fi;
  fi;
}

build_ml_packages() {
  DARCH=${1}
  shift

  for pkg in $@;do
    if [ ! -e ${STATDIR}/${DARCH}/done/${pkg} ];then
      #If we fail on 1st pass rebuild with no clean opt's
      if ! (CLEANOPT=distclean;build_project ${pkg} ${DARCH};sync_ml_libs ${DARCH});then
        (unset CLEANOPT;build_project ${pkg} ${DARCH};sync_ml_libs ${DARCH}) || return 1
      fi;
    fi;
  done;
}

bootstrap_native() {
  #Check arch build dir exists Setup linux headers and env vars
  check_create_arch ${NARCH}

  if [ ! -d ${TOOLPKG}/${NARCH} ];then
    mkdir -p ${TOOLPKG}/${NARCH}
  fi;

  #Build Native Arch Libs
  if [ ! -e /${NLIBDIR}/libc.so.6 ];then
    (build_glibc ${NARCH} ${BUILD}) || return 1
    /sbin/ldconfig >/dev/null 2>&1
  fi;

  #Bootstrap native arch buildtools
  build_packages ${NARCH} binutils groff gdbm perl help2man findutils autoconf automake-1.9 automake-1.10 automake-1.11 automake-1.12 automake-1.13 \
    automake-1.14 help2man zlib libtool gmp gengetopt libidn libtasn1 libffi || return 1

  #build shared gcc to get shared libstdc++/libada/libgcc [C/C++/ADA]
  if [ ! -e /usr/${NLIBDIR}/libstdc++.so ];then
    build_packages ${NARCH} libtool gmp mpfr mpc || return 1
    touch /usr/bin/${BUILD}-gcc.boot
    (build_gcc_bootstrap ${NARCH} ${BUILD} ${NARCH} shared) || return 1
    rm /usr/bin/${BUILD}-gcc.boot /usr/bin/${BUILD}-gcc.shared
    for delstamp in libtool gmp mpfr mpc isl cloog;do
      if [ -e ${STATDIR}/${NARCH}/done/${delstamp} ];then
        rm ${STATDIR}/${NARCH}/done/${delstamp}
      fi;
    done;
    if [ -e /usr/${NLIBDIR}/libgmp.a ];then
      rm /usr/${NLIBDIR}/libgmp.a
    fi;
    if [ -e ${ARCHROOT}/${NARCH}/usr/${NLIBDIR}/libgmp.a ];then
      rm ${ARCHROOT}/${NARCH}/usr/${NLIBDIR}/libgmp.a
    fi;
   elif [ ! -e ${STATDIR}/${NARCH}/done/nettle ] && [ -e ${STATDIR}/${NARCH}/done/gmp ];then
    rm ${STATDIR}/${NARCH}/done/gmp
  fi;

  build_packages ${NARCH} gmp ncursesw ncurses gettext p11-kit nettle texinfo gnutls libgpg-error libgcrypt pcre ustr \
    flex bison libprelude bzip2 libaudit selinux portablexdr libtirpc Linux-PAM  ||return 1

  #Bootstrap native arch with deps for GCC [libjava] if gcc not built
  if [ ! -e ${STATDIR}/${NARCH}/done/unzip ];then
    build_packages ${NARCH} xz libxml2 libxslt libffi gdbm Python libcap libcap-ng patch docbook-4.1.2 docbook-4.2 docbook-4.3 docbook-4.4 \
      docbook-4.5 docbook-xsl xmlto OpenSP openjade expat dbus glib pkg-config gtk-doc libcroco zip unzip || return 1
  fi;

  #Rebuild some packages with python/shared gcc
  if [ ! -e ${STATDIR}/${NARCH}/done/gcc ];then
    for delstamp in glibc libxml2 libxslt texinfo libaudit selinux;do
      if [ -e ${STATDIR}/${NARCH}/done/${delstamp} ];then
        rm ${STATDIR}/${NARCH}/done/${delstamp}
      fi;
    done; 
  fi;
  (BOOTCLEAN=distclean;build_packages ${NARCH} libtool gmp mpfr mpc isl cloog) || return 1
 
  #Build multi arch stack for native
  (build_glibc_march ${NARCH}) || return 1
}

bootstrap_toolchain() {
  #Check arch build dir exists Setup linux headers and env vars
  check_create_arch ${1}

  #Is LD good ?? create symlinks needed
  for binarch in ${HOST} ${BUILD};do
    for bintool in `ls /usr/${binarch}/bin/`;do
      if [ ! -e /usr/bin/${binarch}-${bintool} ];then
        ln -s ../${HOST}/bin/${bintool} /usr/bin/${binarch}-${bintool};
      fi;
    done
  done;

  #bin tools in build dir
  if [ -d /build/${1} ];then
    for bintool in `ls /build/${1}/usr/${HOST}/bin/`;do
      if [ ! -e /build/${1}/usr/bin/${HOST}-${bintool} ];then
        ln -s /usr/${HOST}/bin/${bintool} /build/${1}/usr/bin/${HOST}-${bintool}
      fi;
    done;
  fi;

  #Gnat tools symlinks
  for gnatt in gnatlink gnatmake gnatbind gnatls;do
    if [ -x /usr/bin/${gnatt} ] && [ ! -e /usr/bin/${BUILD}-${gnatt} ];then
      ln -s ${gnatt} /usr/bin/${BUILD}-${gnatt}
    fi;
  done;

  #Get native toolchain in order / multilib
  (bootstrap_native) ||return 1

  if [ "${1}" != "${NARCH}" ];then
    (build_bootstrap_binutils ${1} ${HOST} && \
    build_glibc_march ${1}) || return 1
   else
    build_dependancies ${NARCH} ${BUILD} || return 1

    #QEMU Static runtime emulator
    (build_qemu_static)
    return 0;
  fi;

  #Add QEMU static to build
  if [ -d ${ARCHROOT}/${1}/usr/bin ] && [ "${QCPU}" ] && [ "${1}" != "${NARCH}" ] && \
     [ -f ${TOOLDIR}/${NARCH}/${QEMU}/usr/bin/qemu-${QCPU}-static ];then
    if [ ! -f ${ARCHROOT}/${1}/usr/bin/qemu-${QCPU}-static ] || \
       [ ${TOOLDIR}/${NARCH}/${QEMU}/usr/bin/qemu-${QCPU}-static -nt ${ARCHROOT}/${1}/usr/bin/qemu-${QCPU}-static ];then
      cp ${TOOLDIR}/${NARCH}/${QEMU}/usr/bin/qemu-${QCPU}-static ${ARCHROOT}/${1}/usr/bin/qemu-${QCPU}-static
    fi;
  fi;

  build_dependancies ${1} ${HOST} || return 1

#     mips64)
#       #Need stubs-o32.h from 32bit
#       rsync -aP ${TOOLDIR}/mips/${GLIBC}/usr/include/gnu/stubs-o32.h ${ARCHROOT}/${1}/usr/include/gnu/
#
#       #Add the 32bit libs to 64bit for sysroot
#       rsync -aP ${TOOLDIR}/mips/${GLIBC}/lib ${ARCHROOT}/${1}/
#       rsync -aP ${TOOLDIR}/mips/${GLIBC}/usr/lib ${ARCHROOT}/${1}/usr/
#     ;;
}

configstatdir() {
  if [ ! -d ${STATDIR} ];then
    mkdir ${STATDIR}
  fi;

  if [ ! -d ${STATDIR}/${1} ];then
    mkdir ${STATDIR}/${1}
  fi;
  for stat in done fail output;do
    if [ ! -d ${STATDIR}/${1}/${stat} ];then 
      mkdir ${STATDIR}/${1}/${stat}
    fi;
  done
}

failpkg() {
  touch ${STATDIR}/${2}/fail/${1}
}

loop_on_dir() {
  configstatdir ${1}
  for pkg in `ls ${DEFDIR}`;do
    if [ -e ${STATDIR}/${1}/done/${pkg} ] && [ ${STATDIR}/${1}/done/${pkg} -nt ${DEFDIR}/${pkg} ];then
      continue;
    fi;
    (if check_package ${pkg};then
      build_project ${pkg} ${1} || failpkg ${pkg} ${1}
    fi;)
  done;

  if [ -e ${STATDIR}/${1}/change ];then
    rm ${STATDIR}/${1}/change;
    return 0;
   else
    return 1;
  fi;
}

buildall_arch() {
  while loop_on_dir ${1};do
    if [ -e ${STATDIR}/${1}/change ];then
      rm ${STATDIR}/${1}/change
    fi;
  done;
}

if [ ! -d ${DEFDIR} ] || [ ! -d ${DISTDIR}/scripts ];then
  git clone ${GITURL}/buildscripts.git ${DISTDIR}/
fi;

#XXX find packages smarter use git
for pkg in binutils gcc glibc qemu;do
  if [ ! -e ${DEFDIR}/${pkg} ];then
    echo "Missing cross build definitions requires binutils gcc glibc";
    exit 1;
  fi;
done;

#Setup Native enviroment doing it like this prevents code replication
arch_config ${NARCH}
BUILD=${TUPPLE}
NLIBDIR=${SETLIBDIR}
NKARCH=${LINARCH}
unset TUPPLE SETLIBDIR LINARCH
export BUILD NKARCH NLIBDIR

#OpenJDK specifically barfs when these are not inplace check and fix
for binlink in cpio tar sed grep fgrep egrep;do
  if [ ! -e /bin/${binlink} ] && [ -x /usr/bin/${binlink} ];then
    ln -s /usr/bin/${binlink} /bin;
  fi;
done

if [ ! -d ${PKGDISTDIR} ];then
  mkdir -p ${PKGDISTDIR}
fi;

if [ -d /usr/share/java ] && [ -d ${PKGDISTDIR} ] && [ ! -f ${PKGDISTDIR}/java-jar.tar.xz ];then
  find /usr/share/java/ ! -regex .*libgcj.* |cpio -ov -H tar |xz -9 > ${PKGDISTDIR}/java-jar.tar.xz
fi;

for barch in ${ARCHLIST};do
  #Setup stat dir
  configstatdir ${barch}

  #ensure the tool chain is in place
  bootstrap_toolchain ${barch} || continue;

  #Build multiple packages XXX add git bits
  if (( $# > 1 ));then
    for bproject in $@;do
      if check_package ${bproject};then
        (build_project ${bproject} ${barch} || failpkg ${bproject} ${barch})
      fi;
    done;
   elif (( $# == 1 ));then
    if [ ${1} == "buildall" ];then
       (buildall_arch ${barch})
     elif check_package ${1};then
      (build_project ${1} ${barch} || failpkg ${1} ${barch})
    fi;
   else
    (buildall_arch ${barch})
  fi;
done;
