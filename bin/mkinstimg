#!/bin/bash

NARCH=${NARCH:=$( uname -m )}

BRAND="Distrotech Solutions";
SYSROOT=/var/opt/dtsbuild/sysroot
KSUF="dts";
DTSSRVDIR=/srv/opt/dtsbuild
KERNEL_VER="4.4.0";
IMG_OUTPUT_DIR=${DTSSRVDIR}/install

unset LD_LIBRARY_PATH

Root_Config() {
  cd ${1}

  for todel in etc/HOSTNAME etc/openssl/ca.conf etc/ifconf/* etc/mtab* \
               etc/ppp/ip-up etc/blkid.* root/.bash_history etc/localtime;do
    rm ${todel} > /dev/null 2>&1
  done

  for mketcdir in etc/ppp etc/ifconf;do
    mkdir ${mketcdir}
  done;

  ln -s /proc/self/mounts etc/mtab
  ln -s -r usr/share/zoneinfo/Africa/Johannesburg etc/localtime

  for dfile in netsentry-version group passwd;do
    if [ -e etc/distrotech/${dfile}.dist ];then
      cp etc/distrotech/${dfile}.dist etc/${dfile}
    fi;
  done;

  (cat <<_EOF_
root:\$6\$V.R4jtD.\$d/e4hk86v8LwHr4AWUz0wus2g8QBslNfukkqmOX2tGZPo4SBpMLCZdPJc1ByobXm8YCojBfUCPfXLlLGWIZCp/:16569::::::
admin:\$6\$V.R4jtD.\$d/e4hk86v8LwHr4AWUz0wus2g8QBslNfukkqmOX2tGZPo4SBpMLCZdPJc1ByobXm8YCojBfUCPfXLlLGWIZCp/:16569::::::
_EOF_
) > etc/shadow

  (cat <<EOF
hosts:  	files dns
passwd:		files
shadow:		files
group:		files
EOF
) > etc/nsswitch.conf

  (cat <<_EOF_
#!/bin/bash

(flock -w 20 10 || exit
if [ ! -e /dev/gsmmodem ];then
  TST=X
  while [ "${TST}" != "XXXXXXXX" ] && [ ! -e /dev/gsmmodem ];do
    /usr/bin/sleep 5
    TST=${TST}X
  done;
  if [ ! -e /dev/gsmmodem ];then
    exit
  fi;
fi;

/usr/sbin/pppd /dev/gsmmodem connect "/usr/sbin/chat -v -f /etc/ppp/diald.3g" lock maxfail 5 unit 10 logfile /var/log/pppd.log.3g linkname 3g ipparam 3g defaultroute noauth persist nomultilink usepeerdns

flock -u 10
) 10>/var/lock/ppp10.lock &
_EOF_
) > etc/ifconf/pppup.ppp3g
  chmod 755 etc/ifconf/pppup.ppp3g

  (cat <<_EOF_
#!/bin/bash

grep -v "nameserver" /etc/resolv.conf > /tmp/resolv.conf

if [ "\${DNS1}" ];then
  echo "nameserver \${DNS1}" >> /tmp/resolv.conf
fi;

if [ "\${DNS2}" ];then
  echo "nameserver \${DNS2}" >> /tmp/resolv.conf
fi;

cp /tmp/resolv.conf /etc/resolv.conf

_EOF_
) > etc/ppp/ip-up
  chmod 755 etc/ppp/ip-up
}

Root_Post_Install() {
  INST_PATH=${1}/etc/distrotech/install
  if [ ! -d ${INST_PATH} ];then
    mkdir -p ${INST_PATH}
  fi;

  ${1}/sbin/ldconfig -r ${1} > /dev/null 2>&1
  rm ${1}/etc/ld.so.cache

  echo "*.*                                       /dev/tty5" > ${INST_PATH}/syslog.conf
  echo "telnet          stream  tcp     nowait  root    /usr/sbin/in.telnetd" > ${INST_PATH}/inetd.conf

  if [ -e ${1}/etc/sshd_config ];then
    sed -e "s/^\(PasswordAuthentication\).*/\1 yes/" \
           -e "s/^\(UsePAM\).*/\1 no/" ${1}/etc/sshd_config > ${INST_PATH}/sshd_config
  fi;

  if [ -e ${1}/etc/inittab ];then
    (sed -e "s/^.*agetty.*//" ${1}/etc/inittab
    cat <<EOF
c1:345:respawn:/sbin/agetty -nl /usr/libexec/distrotech/sysconfig 38400 tty1 linux
c2:345:respawn:/sbin/agetty -nl /usr/libexec/shell 38400 tty2 linux
c3:345:respawn:/sbin/agetty -nl /usr/libexec/shell 38400 tty3 linux
c4:345:respawn:/sbin/agetty 38400 tty8 linux
c5:345:respawn:/sbin/agetty 38400 tty9 linux
EOF
) > ${INST_PATH}/inittab
  fi;

  if [ -e ${1}/etc/nscd.conf ];then
    sed -e "s/\(suggested-size.*\)20011/\1211/" ${1}/etc/nscd.conf > ${INST_PATH}/nscd.conf
  fi;

  touch ${INST_PATH}/.install
  (Root_Config ${1})
}

setup_root_img() {
  for dir in sbin root proc sys dev tmp initrd media media/isofs media/install run run/udev;do
    if [ ! -d ${2}/${dir} ];then
      mkdir -p ${2}/${dir}
    fi;
  done
  chmod 1777 ${2}/tmp

  if [ -x ${SYSROOT}/${1}/sbin/modprobe.static ];then
    rsync -a ${SYSROOT}/${1}/sbin/modprobe.static ${2}/sbin/
  fi;
}

fixup_glibc_link() {
  if [ -h ${1}/usr/${2}/${3} ];then
    rm ${1}/usr/${2}/${3}
  fi;
  ln -s -r ${1}/${2}/${3}.${4} ${1}/usr/${2}/${3}
}

fixup_qemu_narch() {
  QARCH=${3}

  case ${1} in
    x86_64)NLIBDIR="lib64";
           NLDNAME="ld-linux-x86-64.so.2";
           NMLIBDIR="x86_64";;
    x86_32)NLIBDIR="libx32";
           NLDNAME="ld-linux-x32.so.2";
           NMLIBDIR="i686";;
    i686)NLIBDIR="lib";
           NLDNAME="ld-linux.so.2";
           NMLIBDIR="i686";;
    *)return 1;;
  esac;

  for pth in ${2}/${QARCH} ${2}/${QARCH}/usr;do
    if [ -e ${pth}/${NLIBDIR} ];then
      mv ${pth}/${NLIBDIR}/ ${pth}/${NLIBDIR}-tmp
      mkdir -p ${pth}/${NLIBDIR}/${NMLIBDIR}
      mv ${pth}/${NLIBDIR}-tmp/${NMLIBDIR} ${pth}/${NLIBDIR}/
    fi;
    if [ ! -d ${pth}/${NLIBDIR}/${NMLIBDIR} ];then
      mkdir -p ${pth}/${NLIBDIR}/${NMLIBDIR}
    fi;
    if [ -e ${pth}/${NLIBDIR}-tmp ];then
      mv ${pth}/${NLIBDIR}-tmp/* ${pth}/${NLIBDIR}/${NMLIBDIR}
      rm -rf ${pth}/${NLIBDIR}-tmp
    fi;
  done

  ln -sr ${2}/${QARCH}/${NLIBDIR}/${NMLIBDIR}/${NLDNAME} ${2}/${QARCH}/${NLIBDIR}/

  for fixln in "libanl.so 1" "libBrokenLocale.so 1" "libcidn.so 1" "libcrypt.so 1" "libdl.so 2" \
               "libm.so 6" "libnsl.so 1" "libnss_compat.so 2" "libnss_db.so 2" "libnss_dns.so 2" \
               "libnss_files.so 2" "libnss_hesiod.so 2" "libnss_nisplus.so 2" "libnss_nis.so 2" \
               "libresolv.so 2" "librt.so 1" "libthread_db.so 1" "libutil.so 1";do
    fixup_glibc_link ${2}/${QARCH} ${NLIBDIR}/${NMLIBDIR} ${fixln}
  done

  ln -sr ${2}/${QARCH}/${NLIBDIR}/${NMLIBDIR} ${2}/${QARCH}/${NLIBDIR}/${NMLIBDIR}/${NMLIBDIR}
  ln -sr ${2}/${QARCH}/usr/${NLIBDIR}/${NMLIBDIR} ${2}/${QARCH}/usr/${NLIBDIR}/${NMLIBDIR}/${NMLIBDIR}

  mkdir ${2}/${QARCH}/etc
  (echo "/${NLIBDIR}/${NMLIBDIR}";echo "/usr/${NLIBDIR}/${NMLIBDIR}") > ${2}/${QARCH}/etc/ld.so.conf
  chroot ${2}/${QARCH} /sbin/ldconfig
  rm -rf ${2}/${QARCH}/etc
}

install_group_aufs() {
  mount ${IMG_OUTPUT_DIR}/${NARCH}/images/qemu.img ${3}/${1}/qemu-narch

  case ${2} in
    qemu)AUFS_MOUNT="${3}/${1}/qemu=rw+moo:${3}/${1}/qemu-narch=rr";
      TO_MOUNT="";;
    @root)AUFS_MOUNT="${3}/${1}/root=rw+moo:${3}/${1}/qemu-narch=rr";
      setup_root_img ${1} ${3}/${1}/root
      TO_MOUNT="";;
    @core)AUFS_MOUNT="${3}/${1}/core=rw+moo:${3}/${1}/root=rr:${3}/${1}/qemu-narch=rr";
      mount ${IMG_OUTPUT_DIR}/${1}/images/root.img ${3}/${1}/root;;
    @buildroot)AUFS_MOUNT="${3}/${1}/buildroot=rw+moo:${3}/${1}/core=rr:${3}/${1}/root=rr:${3}/${1}/qemu-narch=rr";
      mount ${IMG_OUTPUT_DIR}/${1}/images/root.img ${3}/${1}/root;
      mount ${IMG_OUTPUT_DIR}/${1}/images/core.img ${3}/${1}/core;;
  esac;

  mount -t aufs -o br:${AUFS_MOUNT} aufs-${1}-root ${3}/${1}/aufs

  if [ ! -d ${3}/${1}/aufs/tmp ];then
    mkdir -p ${3}/${1}/aufs/tmp
  fi;

  if [ ${1} == "arm64" ] && [ ! -e ${3}/${1}/aufs/lib/ld-linux-aarch64.so.1 ];then
    mkdir -p ${3}/${1}/aufs/lib
    ln -sr  ${3}/${1}/aufs/lib64/ld-2.21.so ${3}/${1}/aufs/lib64/ld-linux-aarch64.so.1
    ln -sr ${3}/${1}/aufs/lib64/ld-linux-aarch64.so.1 ${3}/${1}/aufs/lib
  fi;

  /usr/libexec/distrotech/instpkg ${1} ${3}/${1}/aufs ${2} ${2}-doc
}

umount_aufs() {
  if [ ${2} == "qemu" ];then
    rm -rf ${3}/${1}/qemu/var/lib/yum ${3}/${1}/qemu/var/lib/rpm
    if [ "${1}" == "i686" ] || [ "${1}" == "x86_32" ] || [ "${1}" == "x86_64" ];then
      for mlib_arch in i686 x86_32 x86_64;do
        fixup_qemu_narch ${mlib_arch} ${3}/${1} qemu > /dev/null 2>&1
      done;
    fi;
   else
    rpm --rebuilddb --root ${3}/${1}/aufs
  fi;

  umount ${3}/${1}/aufs ${3}/${1}/qemu-narch

  case ${2} in
    root)Root_Post_Install ${3}/${1}/root;;
    core)umount ${3}/${1}/root;;
    buildroot)umount ${3}/${1}/root ${3}/${1}/core;;
  esac;

  if [ "${2}" != "qemu" ];then
    if [ ! -d ${IMG_OUTPUT_DIR}/${1}/repo/${2} ];then
      mkdir -p ${IMG_OUTPUT_DIR}/${1}/repo/${2}
    fi;
    rsync -a ${3}/${1}/${2}/var/cache/yum/*/packages/*.rpm  ${IMG_OUTPUT_DIR}/${1}/repo/${2}/
  fi;
  rm -rf ${3}/${1}/${2}/var/cache/yum
  mksquashfs ${3}/${1}/${2}/* ${IMG_OUTPUT_DIR}/${1}/images/${2}.img -comp xz
}

create_images_squashfs() {
  IMGDIR=$(mktemp -d -p /root tmpimgdir.XXXXXXXXXXX)
  KERN_VER=${1}
  shift

  if [ ! "${IMGDIR}" ] || [ ! -d ${IMGDIR} ];then
    return 1
  fi;

  for ARCH in $@;do
    case ${ARCH} in
      i686)kernbits="x86";;
      x86_32)kernbits="x86_x32";;
      *)kernbits=${ARCH};;
    esac;

    case ${ARCH} in
      i686|x86_32|x86_64)YUMDIR="/intel/${ARCH}";;
      arm*)YUMDIR="/arm/${ARCH}";;
      ppc*)YUMDIR="/ppc/${ARCH}";;
      mips*)YUMDIR="/mips/${ARCH}";;
    esac;

    if [ ! -d ${IMG_OUTPUT_DIR}/${ARCH}/images ];then
      mkdir -p ${IMG_OUTPUT_DIR}/${ARCH}/images
    fi;

    if [ -e ${SYSROOT}/${ARCH}/boot/vmlinuz-${KERN_VER}-${kernbits}-${KSUF} ];then
      if [ ${SYSROOT}/${ARCH}/boot/vmlinuz-${KERN_VER}-${kernbits}-${KSUF} -nt ${IMG_OUTPUT_DIR}/${ARCH}/vmlinuz ];then
        cp ${SYSROOT}/${ARCH}/boot/vmlinuz-${KERN_VER}-${kernbits}-${KSUF} ${IMG_OUTPUT_DIR}/${ARCH}/vmlinuz
        rm ${IMG_OUTPUT_DIR}/${ARCH}/initrd.img
      fi;
      if [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/initrd.img ] || [ /usr/sbin/mkinitrd -nt ${IMG_OUTPUT_DIR}/${ARCH}/initrd.img ];then
        mkinitrd bootimg ${IMG_OUTPUT_DIR}/${ARCH}/initrd.img ${SYSROOT}/${ARCH}/ ${KERN_VER}-${kernbits}-${KSUF}
      fi;
    fi;

    if [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/images/root.img ] || [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/images/core.img ] || \
       [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/images/buildroot.img ];then
      if [ -d ${IMG_OUTPUT_DIR}/${ARCH}/repo ];then
        rm -rf ${IMG_OUTPUT_DIR}/${ARCH}/repo
      fi;
      for boot_img in root core buildroot qemu;do
        if [ -e ${IMG_OUTPUT_DIR}/${ARCH}/images/${boot_img}.img ];then
          rm ${IMG_OUTPUT_DIR}/${ARCH}/images/${boot_img}.img
        fi;
      done
     else
      continue;
    fi;

    for aufs_dir in qemu root buildroot core aufs qemu-narch;do
      mkdir -p ${IMGDIR}/${ARCH}/${aufs_dir}
    done

    if [ "${NARCH}" == "i686" ] || [ "${NARCH}" == "x86_32" ] || [ "${NARCH}" == "x86_64" ];then
      if [ ! -f ${IMG_OUTPUT_DIR}/${NARCH}/images/qemu.img ];then
        /usr/libexec/distrotech/instpkg ${NARCH} ${IMGDIR}/${ARCH}/qemu-narch qemu glibc
        rm -rf ${IMGDIR}/${ARCH}/qemu-narch/var/cache/yum ${IMGDIR}/${ARCH}/qemu-narch/var/lib/yum ${IMGDIR}/${ARCH}/qemu-narch/var/lib/rpm

        for mlib_arch in i686 x86_32 x86_64;do
          fixup_qemu_narch ${mlib_arch} ${IMGDIR}/${ARCH} qemu-narch > /dev/null 2>&1
        done;
        mksquashfs ${IMGDIR}/${ARCH}/qemu-narch/* ${IMG_OUTPUT_DIR}/${NARCH}/images/qemu.img -comp xz
      fi;
     else
      break;
    fi;

    if [ ! -f ${IMG_OUTPUT_DIR}/${ARCH}/images/qemu.img ];then
      install_group_aufs ${ARCH} qemu ${IMGDIR}
      umount_aufs ${ARCH} qemu ${IMGDIR}
    fi;

    if [ ! -f ${IMG_OUTPUT_DIR}/${NARCH}/images/qemu.img ];then
      continue
    fi;

    if [ ! -e  ${IMG_OUTPUT_DIR}/${ARCH}/images/root.img ];then
      install_group_aufs ${ARCH} @root ${IMGDIR}
      umount_aufs ${ARCH} root ${IMGDIR}
    fi;

    if [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/images/core.img ] && [ -e ${IMG_OUTPUT_DIR}/${ARCH}/images/root.img ];then
      install_group_aufs ${ARCH} @core ${IMGDIR}
      umount_aufs ${ARCH} core ${IMGDIR}
    fi;

    if [ ! -e ${IMG_OUTPUT_DIR}/${ARCH}/images/buildroot.img ] && [ -e ${IMG_OUTPUT_DIR}/${ARCH}/images/core.img ] &&  [ -e ${IMG_OUTPUT_DIR}/${ARCH}/images/root.img ];then
      install_group_aufs ${ARCH} @buildroot ${IMGDIR}
      umount_aufs ${ARCH} buildroot ${IMGDIR}
    fi;

    if [ ! -d ${IMG_OUTPUT_DIR}/${ARCH}/repo/repodata ];then
      mkdir -p ${IMG_OUTPUT_DIR}/${ARCH}/repo/repodata
    fi;

    cp ${DTSSRVDIR}/yum/${YUMDIR}/repodata/*-groups.xml.gz ${IMG_OUTPUT_DIR}/${ARCH}/repo/repodata/groups.xml.gz
    gunzip -f ${IMG_OUTPUT_DIR}/${ARCH}/repo/repodata/groups.xml.gz
    createrepo -g repodata/groups.xml --update  ${IMG_OUTPUT_DIR}/${ARCH}/repo
  done;

  rm -rf ${IMGDIR}
}

if [ "$#" != "0" ];then
  create_images_squashfs ${KERNEL_VER} $@
 else
  create_images_squashfs ${KERNEL_VER} x86_64 i686 x86_32 arm armv6 arm64 ppc ppc64 mips mips64
fi;
