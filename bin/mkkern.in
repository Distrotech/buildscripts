#!/bin/bash

SRCDIR=@SRCDIR@
ARCHROOT=@ARCHROOT@
DTSSRVDIR=@SRVDIR@
PKGBUILDDIR=@BUILDDIR@
PKGDISTDIR=@SRVDIRTAR@
KCONFIGDIR=@KCONFIGDIR@
PKGDESTDIR=${PKGBUILDDIR}/staging
RPMDIR=${DTSSRVDIR}/yum

PKGURL=http://github.com/Distrotech
RPMBROOT=/root/rpmbuild

ARCH=${1}
LINDIR=${ARCHROOT}/${ARCH}/${SRCDIR}/kernel/linux

if [ ! -d ${LINDIR} ];then
  exit 1;
fi;

cd ${LINDIR}
VERSION=$(make kernelversion)

case ${ARCH} in
  i[3-6]86|x86_64|x86_32)KFLAVOR="intel-dts";;
  mips64)KFLAVOR="cavium-octeon";
    KERNELT=vmlinux.64;;
esac;

KCONFIG=${KCONFIGDIR}/${ARCH}-${KFLAVOR}-${VERSION};

if [ ! -e ${KCONFIG} ];then
  echo "Missing config ${KCONFIG}";
  exit 1
fi;

CPUNO=$(lscpu  |awk '/^CPU\(s\)/ {print $2}')
MAKE_J="-j${CPUNO}"

export KERNELT DESTDIR MAKE_J KFLAVOR VERSION ARCH KCONFIG

case ${ARCH} in
  arm64)CROSS_COMPILE=aarch64-linux-gnu-;;
  arm)CROSS_COMPILE=arm-linux-gnueabi-;;
  mips64)CROSS_COMPILE=mips64-octeon-linux-gnu-;;
  x86_32)CROSS_COMPILE=x86_64-linux-gnux32-;;
  *)CROSS_COMPILE=${ARCH}-linux-gnu-;;
esac;

case ${ARCH} in
  x86_*|i[3-6]86)KARCH="x86";;
  arm64)KARCH=arm64;;
  *64)KARCH=${ARCH::-2};;
  *)KARCH=${ARCH};;
esac;

NARCH=${NARCH:=$( uname -m )}
case ${NARCH} in
  ppc|powerpc)NARCH=powerpc;;
  ppc64|powerpc64)NARCH=powerpc64;;
  arm*)NARCH=arm;;
  aarch64)NARCH=arm64;;
esac;

build_kernel_rpm_spec() {
cat <<EOF
Name: ${2}
Epoch: 0
Version: ${VERSION}
Release: ${release}
Summary: Linux ${VERSION}-${KFLAVOR} installed files
Group: Distrotech Linux ${VERSION} ${KFLAVOR}
License: Refer to sourcecode
BuildRoot: ${1}
URL: ${PKGURL}/linux
AutoReqProv: 1

%define _arch ${ARCH}
%global __strip /bin/true

%description
Distrotech Linux ${VERSION} ${KFLAVOR} installed files

%install
find %{buildroot} -empty -type d -delete

%package modules
Group: Distrotech Linux ${VERSION} ${KFLAVOR}
Summary: Linux ${VERSION}-${KFLAVOR} installed files (modules)

%package firmware
Group: Distrotech Linux ${VERSION} ${KFLAVOR}
Summary: Linux ${VERSION}-${KFLAVOR} installed files (firmware)

%package dahdi
Group: Distrotech Linux ${VERSION} ${KFLAVOR}
Summary: Linux ${VERSION}-${KFLAVOR} installed files (dahdi)

%package dev
Group: Distrotech Linux ${VERSION} ${KFLAVOR}
Summary: Linux ${VERSION}-${KFLAVOR} installed files (dev)

%description modules
Distrotech Linux ${VERSION} ${KFLAVOR} installed files (modules)

%description firmware
Distrotech Linux ${VERSION} ${KFLAVOR} installed files (firmware)

%description dahdi
Distrotech Linux ${VERSION} ${KFLAVOR} installed files (dahdi)

%description dev
Distrotech Linux ${VERSION} ${KFLAVOR} installed files (dev)

%files
/boot

%files modules
/lib/modules

%files firmware
/lib/firmware

%files dev
/usr/include

%files dahdi
/usr/lib
/usr/share

EOF
}

build_kernel_rpm() {
  RPMNAME=linux-${KFLAVOR}
  if [ ! -d ${RPMDIR}/${ARCH}/${RPMNAME}/${2} ];then
    mkdir -p ${RPMDIR}/${ARCH}/${RPMNAME}/${2}
  fi;

  if [ "${ARCH}" == "${NARCH}" ];then
    RPMROOT="/";
   else
    RPMROOT="${ARCHROOT}/${ARCH}";
  fi;

  RPMIVER=$(rpm -qi --root=${RPMROOT} ${RPMNAME} |awk '$1 == "Version" {print $3}')
  if [ "${RPMIVER}" ] && [ "${RPMIVER}" == "${VERSION}" ];then
    release=$(rpm -qi --root=${RPMROOT} ${RPMNAME} |awk '$1 == "Release" {print $3}')
   else
    release=0
  fi
  orig_release=${release}
  let release++

  if [ ! -d ${RPMBROOT}/RPMS ];then
    mkdir -p ${RPMBROOT}/RPMS
  fi;

  build_kernel_rpm_spec ${1} ${RPMNAME} > /tmp/kern.spec
  rpmbuild -bb /tmp/kern.spec --target=${ARCH} --buildroot ${1}
  rm /tmp/kern.spec

  RPM_PATH=${RPMBROOT}/RPMS/${ARCH}/
  YUM_PATH=${RPMDIR}/${ARCH}/${RPMNAME}/${2}

  if [ ! -d ${YUM_PATH} ];then
    mkdir -p ${YUM_PATH}
  fi;

  for rfile in "" "modules" "firmware" "dahdi" "dev";do
    RPM_FILE=${RPMNAME}
    if [ "${rfile}" ];then
      RPM_FILE=${RPM_FILE}-${rfile}
    fi;
    RPM_FILE=${RPM_FILE}-${VERSION}-${release}.${ARCH}.rpm

    YUM_FILE=${YUM_PATH}/${RPM_FILE}
    if [ -e ${RPM_PATH}/${RPM_FILE} ];then
      mv ${RPM_PATH}/${RPM_FILE} ${YUM_FILE}
    fi;

    if [ ! "${RPMIVER}" ] && [ -e ${YUM_FILE} ];then
      rpm -ivh --force --nodeps --ignorearch --root=${RPMROOT} ${YUM_FILE}
     elif [ ${release} != ${orig_release} ] && [ -e ${YUM_FILE} ];then
      rpm -Uvh --force --nodeps --ignorearch --root=${RPMROOT} ${YUM_FILE}
    fi;
  done;
}

build_kernel_tar() {
  TARBALL=${PKGDISTDIR}/${ARCH}/${2}
  if [ ! -d ${TARBALL} ];then
    mkdir -p ${TARBALL}
  fi;

  (cd ${1}
  find . -regex '.*\.install$' -or -regex '.*\.\.install.cmd$'  -or -regex '.*\.check$' -or -regex '.*\.check.cmd$' |\
       awk '{printf "rm %s\n",$1}' |sh
  tar -cJf ${TARBALL}/${2}.tar.xz boot/
  tar -cJf ${TARBALL}/${2}-modules.tar.xz lib/modules
  tar -cJf ${TARBALL}/${2}-firmware.tar.xz lib/firmware
  tar -cJf ${TARBALL}/${2}-dev.tar.xz usr/include
  tar -cJf ${TARBALL}/${2}-dahdi.tar.xz usr/lib usr/share)
}

build_kernel() {
  if [ -d ${1} ];then
    rm -rf ${1}
  fi;
  mkdir -p ${1}/boot


  make distclean mrproper && \
  cp ${KCONFIG} .config &&  \
  make ARCH=${KARCH} KCONFIG_CONFIG=${KCONFIG} ${MAKE_J} CROSS_COMPILE=${CROSS_COMPILE} all firmware modules ${KERNELT} && \
  make ARCH=${KARCH} KCONFIG_CONFIG=${KCONFIG} INSTALL_MOD_PATH=${1} INSTALL_PATH=${1}/boot INSTALL_HDR_PATH=${1}/usr \
       CROSS_COMPILE=${CROSS_COMPILE} headers_install install modules_install firmware_install headers_install_all || exit 1

  if [ -e ${1}/usr/include/scsi/scsi.h ];then
    rm ${1}/usr/include/scsi/scsi.h
  fi;

  eval `grep CONFIG_LOCALVERSION ${KCONFIG}`
  VSUF="${VERSION}${CONFIG_LOCALVERSION}";

  if [ -e ${1}/boot/vmlinuz ];then
    mv ${1}/boot/vmlinuz ${1}/boot/vmlinuz-${VSUF}
  fi;

  if [ -e ${1}/boot/System.map ];then
    mv ${1}/boot/System.map ${1}/boot/System.map-${VSUF}
  fi;

  if [ -d ${1}/usr/include/asm ];then
    rm -rf ${1}/usr/include/asm
    ln -s -r ${1}/usr/include/asm-${KARCH} ${1}/usr/include/asm
  fi;

  if [ -d ${SRCDIR}/kernel/dahdi ];then
    cd ${SRCDIR}/kernel/dahdi

    mkdir -p ${1}/etc/udev/rules.d/
    make ARCH=${KARCH} KSRC=${LINDIR} KVERS=${VSUF} clean
    make ARCH=${KARCH} KSRC=${LINDIR} KVERS=${VSUF} CROSS_COMPILE=${CROSS_COMPILE} ${MAKE_J} all
    make ARCH=${KARCH} KSRC=${LINDIR} KVERS=${VSUF} DESTDIR=${1} CROSS_COMPILE=${CROSS_COMPILE} install
    make ARCH=${KARCH} KSRC=${LINDIR} KVERS=${VSUF} clean
  fi;

  if [ -d ${SRCDIR}/kernel/mISDN ];then
    cd ${SRCDIR}/kernel/mISDN
    make ARCH=${KARCH} LINUX_SOURCE=${LINDIR} LINUX=${LINDIR} KVERS=${VSUF} INSTALL_PREFIX=${1} CROSS_COMPILE=${CROSS_COMPILE} clean all
    make ARCH=${KARCH} LINUX_SOURCE=${LINDIR} LINUX=${LINDIR} KVERS=${VSUF} INSTALL_PREFIX=${1} CROSS_COMPILE=${CROSS_COMPILE} misdn-headers install
  fi;

  depmod -b ${1} -ae -F ${1}/boot/System.map-${VSUF} ${VSUF}

  for kernln in source build;do
    if [ -e ${1}/lib/modules/${VSUF}/${kernln} ];then
      rm ${1}/lib/modules/${VSUF}/${kernln}
    fi;
  done;
  build_kernel_tar ${1} ${2}
  build_kernel_rpm ${1} ${2}
}

PNAME=linux-${KFLAVOR}-${VERSION}
DESTDIR=${PKGDESTDIR}/${ARCH}/${PNAME}

build_kernel ${DESTDIR} ${PNAME}
